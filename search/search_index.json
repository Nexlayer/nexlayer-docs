{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83d\ude80 Welcome to Nexlayer","text":"<p>Nexlayer is the AI-native cloud for builders, creators, startups, and agents.</p> <p>It's the fastest way to launch full-stack apps \u2014 from code or prompt to a live, scalable cloud deployment \u2014 without complex configs or platform overhead.</p>"},{"location":"#what-is-nexlayer","title":"What is Nexlayer?","text":"<p>Nexlayer is a new kind of cloud platform that lets you:</p> <ul> <li>Deploy full-stack apps with zero infrastructure setup</li> <li>Skip manual pipelines, DevOps, and boilerplate</li> <li>Auto-scale with always-live deployments</li> <li>Launch from CLI, Web UI, or AI-native tools</li> </ul>"},{"location":"#who-is-it-for","title":"Who is it for?","text":"<p>\ud83d\udee0\ufe0f Builders shipping real products</p> <p>\ud83c\udfa8 Creators using AI or no-code workflows</p> <p>\ud83d\ude80 Startups that want real infra without a platform team</p> <p>\ud83e\udd16 Agents that build and deploy autonomously</p>"},{"location":"#why-nexlayer","title":"Why Nexlayer?","text":"<p>\u26a1 Launch in 60 seconds </p> <p>\ud83e\udde0 AI-native \u2014 designed for codegen and agent workflows</p> <p>\ud83e\uddf0 Full-stack support \u2014 containers, APIs, UIs, databases</p> <p>\ud83c\udf0d No lock-in \u2014 portable configs, real infrastructure, your stack</p>"},{"location":"#how-it-works","title":"How it works","text":"<p>Define your app in a simple <code>nexlayer.yaml</code> Just describe what you want to ship \u2014 services, containers, ports, env vars \u2014 and Nexlayer handles the rest. Need help? Ask ChatGPT right in your editor.</p> <p>Deploy from anywhere Use the CLI, curl, or type \"Deploy my app to nexlayer.com\" in your AI code editors like Cursor,  Windsurf, Copilot, or your AI-powered terminals like Claude Code, Warp, Memex etc... </p> <p>Nexlayer handles the cloud \u2014 instantly You get a live URL and production-ready cloud infrastructure with:</p> <p>What happens automatically when you deploy to Nexlayer:  \u2705 Service discovery via .pod \u2705 URL path routing \u2705 Zero-config networking \u2705 Secure environment variable injection \u2705 Volume provisioning and mounting \u2705 Encrypted secrets (auto-mounted) \u2705 Auto TLS for public URLs \u2705 Automatic scaling and restarts \u2705 Internal DNS between pods \u2705 Image pulling and pod booting"},{"location":"#ready-to-launch","title":"Ready to launch?","text":"<p>\ud83d\udc49 Jump into the Quickstart Guide \ud83d\udc49 Or explore CLI, Web UI, and Agent Deployments</p>"},{"location":"#support","title":"Support","text":"<p>If you need help or have questions, please: 1. Check our FAQ 2. Open an issue on GitHub 3. Join our community discussions </p>"},{"location":"api-reference/CODE_OF_CONDUCT/","title":"Code of Conduct for Nexlayer API Usage","text":""},{"location":"api-reference/CODE_OF_CONDUCT/#our-pledge","title":"Our Pledge","text":"<p>We are committed to providing a reliable, secure, and efficient API service for deploying AI-powered applications. In return, we expect all users to use our API responsibly and ethically.</p>"},{"location":"api-reference/CODE_OF_CONDUCT/#expected-behavior","title":"Expected Behavior","text":"<ol> <li>Resource Usage</li> <li>Use resources efficiently and appropriately</li> <li>Monitor and optimize your application's resource consumption</li> <li>Scale resources based on actual needs</li> <li> <p>Clean up unused deployments</p> </li> <li> <p>Rate Limiting</p> </li> <li>Respect the rate limits (100 requests per minute)</li> <li>Implement proper request throttling</li> <li>Cache responses when appropriate</li> <li> <p>Use exponential backoff for retries</p> </li> <li> <p>Security</p> </li> <li>Keep your session tokens secure</li> <li>Never share or expose your tokens</li> <li>Use HTTPS for all API requests</li> <li>Implement proper token rotation</li> <li> <p>Follow security best practices</p> </li> <li> <p>Application Development</p> </li> <li>Build applications that comply with all applicable laws</li> <li>Respect user privacy and data protection regulations</li> <li>Implement proper error handling</li> <li>Follow AI ethics guidelines</li> <li>Test thoroughly before deployment</li> </ol>"},{"location":"api-reference/CODE_OF_CONDUCT/#unacceptable-behavior","title":"Unacceptable Behavior","text":"<ol> <li>API Abuse</li> <li>Attempting to bypass rate limits</li> <li>Making excessive or unnecessary API calls</li> <li>Using the API for malicious purposes</li> <li> <p>Attempting to overload or disrupt the service</p> </li> <li> <p>Security Violations</p> </li> <li>Sharing or exposing session tokens</li> <li>Attempting to access unauthorized resources</li> <li>Exploiting security vulnerabilities</li> <li> <p>Using the API to harm others</p> </li> <li> <p>Resource Misuse</p> </li> <li>Creating unnecessary deployments</li> <li>Leaving unused deployments running</li> <li>Over-provisioning resources</li> <li>Using resources for unauthorized purposes</li> </ol>"},{"location":"api-reference/CODE_OF_CONDUCT/#consequences","title":"Consequences","text":"<p>Violation of these guidelines may result in: - Temporary suspension of API access - Rate limit restrictions - Account review - Permanent termination of service</p>"},{"location":"api-reference/CODE_OF_CONDUCT/#reporting-violations","title":"Reporting Violations","text":"<p>If you observe or experience any violations of this code of conduct, please report them to: Email: support@nexlayer.com</p>"},{"location":"api-reference/CODE_OF_CONDUCT/#enforcement","title":"Enforcement","text":"<p>We take violations of this code of conduct seriously. Our team will review all reported violations and take appropriate action to maintain a secure and reliable service for all users.</p>"},{"location":"api-reference/CODE_OF_CONDUCT/#changes-to-this-code","title":"Changes to This Code","text":"<p>We may update this code of conduct as needed. Users will be notified of any significant changes through: - API documentation updates - Email notifications</p>"},{"location":"api-reference/CODE_OF_CONDUCT/#need-help","title":"Need Help?","text":"<p>Need help? Contact us (support@nexlayer.com) </p>"},{"location":"api-reference/NOTICE/","title":"\ud83d\udcd8 License &amp; Usage Terms","text":"<p>This repository and its contents\u2014including but not limited to the OpenAPI schema, Markdown documentation, and deployment examples\u2014are the proprietary intellectual property of AuditDeploy Inc.</p> <p>Nexlayer is a product of AuditDeploy Inc., an applied research lab working on automating AI product deployment. We're building the deployer of the future\u2014an AI agent that can take any codebase and turn it into a live, scalable product in seconds.</p>"},{"location":"api-reference/NOTICE/#permitted-use","title":"\u2705 Permitted Use","text":"<p>You may: - View and read the documentation to integrate with Nexlayer services - Reference endpoints for building, deploying, or scaling applications using the Nexlayer platform</p>"},{"location":"api-reference/NOTICE/#restricted-use","title":"\u274c Restricted Use","text":"<p>You may not: - Copy, modify, distribute, or republish any part of this repository - Use the OpenAPI spec for non-Nexlayer services - Generate SDKs, mock servers, or alternative platforms based on this spec - Remove, alter, or obscure branding, references, or structure</p>"},{"location":"api-reference/NOTICE/#legal","title":"\ud83d\udee1\ufe0f Legal","text":"<p>All rights are reserved by AuditDeploy Inc. Unauthorized use or reproduction of this repository may result in legal action.</p> <p>For licensing inquiries or enterprise access, contact: legal@nexlayer.com </p>"},{"location":"api-reference/readme/","title":"Nexlayer API Reference","text":"<p>Welcome to the official Nexlayer API Reference. Nexlayer empowers you to build, deploy, and manage AI-powered applications at scale with a simple, secure, and robust API.</p>"},{"location":"api-reference/readme/#contents","title":"Contents","text":"<ul> <li>Introduction</li> <li>Authentication</li> <li>API Endpoints</li> <li>Deployments</li> <li>Reservations</li> <li>Validation &amp; Schema</li> <li>Feedback</li> <li>Error Handling</li> <li>Rate Limits</li> <li>Best Practices</li> <li>Examples</li> <li>Support</li> </ul>"},{"location":"api-reference/readme/#introduction","title":"Introduction","text":"<p>Nexlayer's API empowers developers to programmatically deploy, manage, and scale AI applications in production environments. Our platform abstracts away the complexity of infrastructure management, allowing you to focus on what matters most: your application's capabilities.</p>"},{"location":"api-reference/readme/#quickstart","title":"\ud83d\ude80 Quickstart","text":"<p>Deploy your first AI application in seconds:</p> <pre><code>curl -X POST \"https://app.nexlayer.io/startUserDeployment\" \\\n  -H \"Content-Type: text/x-yaml\" \\\n  --data-binary @nexlayer.yaml\n</code></pre> <p>What is <code>nexlayer.yaml</code>?</p> <p>Your deployment configuration is defined in a simple YAML file. Learn how to write one in the Nexlayer Deployment YAML Guide.</p> <ul> <li>See Nexlayer Deployment YAML Guide for full configuration options and best practices.</li> </ul>"},{"location":"api-reference/readme/#base-url","title":"Base URL","text":"<pre><code>https://app.nexlayer.io\n</code></pre>"},{"location":"api-reference/readme/#content-types","title":"Content Types","text":"<ul> <li>For YAML deployments: <code>text/x-yaml</code></li> <li>For JSON requests: <code>application/json</code></li> </ul>"},{"location":"api-reference/readme/#authentication","title":"Authentication","text":"<p>All Nexlayer API requests are authenticated using a session token. Your session token is provided upon successful deployment initiation and should be included in all subsequent requests.</p> <p>Security Notice: Treat your session token as sensitive data. Store it securely and never expose it in client-side code or public repositories.</p>"},{"location":"api-reference/readme/#session-token-lifecycle","title":"Session Token Lifecycle","text":"<ul> <li>Creation: Automatically generated when you start a deployment</li> <li>Expiration: 24 hours from creation or last extension</li> <li>Renewal: Use the <code>/extendDeployment</code> endpoint to extend your session</li> </ul>"},{"location":"api-reference/readme/#api-endpoints","title":"API Endpoints","text":""},{"location":"api-reference/readme/#deployments","title":"Deployments","text":""},{"location":"api-reference/readme/#start-a-deployment","title":"Start a Deployment","text":"<p>Creates and launches a new deployment based on your configuration.</p> <pre><code>POST /startUserDeployment\n</code></pre> <p>Request Headers:</p> Header Value Description <code>Content-Type</code> <code>text/x-yaml</code> YAML configuration file format <p>Request Body:</p> <p>Upload your <code>nexlayer.yaml</code> configuration file directly. For details on creating your configuration file, see the Nexlayer YAML Guide.</p> <p>Example Request:</p> <pre><code>curl -X POST \"https://app.nexlayer.io/startUserDeployment\" \\\n  -H \"Content-Type: text/x-yaml\" \\\n  --data-binary @nexlayer.yaml\n</code></pre> <p>Response:</p> <pre><code>{\n  \"message\": \"Deployment started successfully\",\n  \"url\": \"https://fantastic-fox-my-mern-app.alpha.nexlayer.ai\",\n  \"sessionToken\": \"nx_tkn_f8a9b2c3d4e5f6g7h8i9j0\",\n  \"applicationName\": \"My Mern App\",\n  \"status\": {\n    \"environment\": \"Initializing deployment environment\"\n  },\n  \"extend\": {\n    \"message\": \"Your deployment will expire in 120 minutes. You can extend it up to 3 times.\",\n    \"extendURL\": \"curl -X POST https://app.nexlayer.io/extendDeployment -H \\\"Content-Type: application/json\\\" -d '{\\\"applicationName\\\":\\\"My Mern App\\\",\\\"sessionToken\\\":\\\"nx_tkn_f8a9b2c3d4e5f6g7h8i9j0\\\"}'\"\n  },\n  \"claim\": {\n    \"message\": \"Claim this deployment to make it permanent\",\n    \"claimURL\": \"curl -X POST https://app.nexlayer.io/claimDeployment -H \\\"Content-Type: application/json\\\" -d '{\\\"applicationName\\\":\\\"My Mern App\\\",\\\"sessionToken\\\":\\\"nx_tkn_f8a9b2c3d4e5f6g7h8i9j0\\\"}'\"\n  },\n  \"info\": \"Your application is being deployed and will be available shortly\"\n}\n</code></pre>"},{"location":"api-reference/readme/#extend-a-deployment","title":"Extend a Deployment","text":"<p>Extends the lifetime of an existing deployment to prevent automatic cleanup.</p> <pre><code>POST /extendDeployment\n</code></pre> <p>Request Headers:</p> Header Value Description <code>Content-Type</code> <code>application/json</code> JSON request format <p>Request Body:</p> <pre><code>{\n  \"applicationName\": \"My Mern App\",\n  \"sessionToken\": \"nx_tkn_f8a9b2c3d4e5f6g7h8i9j0\"\n}\n</code></pre> <p>Example Request:</p> <pre><code>curl -X POST \"https://app.nexlayer.io/extendDeployment\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"applicationName\": \"My Mern App\", \"sessionToken\": \"nx_tkn_f8a9b2c3d4e5f6g7h8i9j0\"}'\n</code></pre> <p>Response:</p> <pre><code>{\n  \"message\": \"Application My MERN App has been extended. Environment will expire in 120 minutes. 2 extension(s) remaining.\"\n}\n</code></pre>"},{"location":"api-reference/readme/#claim-a-deployment","title":"Claim a Deployment","text":"<p>Converts a temporary deployment into a permanent one associated with your account.</p> <pre><code>POST /claimDeployment\n</code></pre> <p>Request Headers:</p> Header Value Description <code>Content-Type</code> <code>application/json</code> JSON request format <p>Request Body:</p> <pre><code>{\n  \"applicationName\": \"My Mern App\",\n  \"sessionToken\": \"nx_tkn_f8a9b2c3d4e5f6g7h8i9j0\"\n}\n</code></pre> <p>Example Request:</p> <pre><code>curl -X POST \"https://app.nexlayer.io/claimDeployment\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"applicationName\": \"My Mern App\", \"sessionToken\": \"nx_tkn_f8a9b2c3d4e5f6g7h8i9j0\"}'\n</code></pre> <p>Response:</p> <pre><code>{\n  \"message\": \"You're almost there! Visit https://app.nexlayer.io/claim/nx_claim_a1b2c3d4e5 to finalize your deployment.\",\n  \"claimURL\": \"https://app.nexlayer.io/claim/nx_claim_a1b2c3d4e5\",\n  \"claimToken\": \"nx_claim_a1b2c3d4e5\"\n}\n</code></pre> <p>Note: After receiving the claim token, you must visit the provided URL or use the token within 30 minutes to finalize the claim process.</p>"},{"location":"api-reference/readme/#reservations","title":"Reservations","text":""},{"location":"api-reference/readme/#add-a-deployment-reservation","title":"Add a Deployment Reservation","text":"<p>Reserves a deployment to prevent automatic cleanup.</p> <pre><code>POST /addDeploymentReservation\n</code></pre> <p>Request Headers:</p> Header Value Description <code>Content-Type</code> <code>application/json</code> JSON request format <p>Request Body:</p> <pre><code>{\n  \"applicationName\": \"My Mern App\",\n  \"sessionToken\": \"nx_tkn_f8a9b2c3d4e5f6g7h8i9j0\"\n}\n</code></pre> <p>Example Request:</p> <pre><code>curl -X POST \"https://app.nexlayer.io/addDeploymentReservation\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"applicationName\": \"My Mern App\", \"sessionToken\": \"nx_tkn_f8a9b2c3d4e5f6g7h8i9j0\"}'\n</code></pre> <p>Response:</p> <pre><code>{\n  \"message\": \"Application My MERN App reservation has been added.\"\n}\n</code></pre>"},{"location":"api-reference/readme/#remove-a-deployment-reservation","title":"Remove a Deployment Reservation","text":"<p>Removes a reservation from a deployment, allowing it to be cleaned up automatically.</p> <pre><code>POST /removeDeploymentReservation\n</code></pre> <p>Request Headers:</p> Header Value Description <code>Content-Type</code> <code>application/json</code> JSON request format <p>Request Body:</p> <pre><code>{\n  \"applicationName\": \"My Mern App\",\n  \"sessionToken\": \"nx_tkn_f8a9b2c3d4e5f6g7h8i9j0\"\n}\n</code></pre> <p>Example Request:</p> <pre><code>curl -X POST \"https://app.nexlayer.io/removeDeploymentReservation\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"applicationName\": \"My Mern App\", \"sessionToken\": \"nx_tkn_f8a9b2c3d4e5f6g7h8i9j0\"}'\n</code></pre> <p>Response:</p> <pre><code>{\n  \"message\": \"Application My MERN App reservation has been removed. Application site will be removed within the next 10 minutes.\"\n}\n</code></pre>"},{"location":"api-reference/readme/#remove-all-reservations","title":"Remove All Reservations","text":"<p>Removes all reservations associated with your session token.</p> <pre><code>POST /removeReservations\n</code></pre> <p>Request Headers:</p> Header Value Description <code>Content-Type</code> <code>application/json</code> JSON request format <p>Request Body:</p> <pre><code>{\n  \"sessionToken\": \"nx_tkn_f8a9b2c3d4e5f6g7h8i9j0\"\n}\n</code></pre> <p>Example Request:</p> <pre><code>curl -X POST \"https://app.nexlayer.io/removeReservations\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"sessionToken\": \"nx_tkn_f8a9b2c3d4e5f6g7h8i9j0\"}'\n</code></pre> <p>Response:</p> <pre><code>{\n  \"message\": \"All reservations have been removed. Application sites will be removed within the next 10 minutes.\"\n}\n</code></pre>"},{"location":"api-reference/readme/#get-all-reservations","title":"Get All Reservations","text":"<p>Retrieves all active reservations associated with your session token.</p> <pre><code>GET /getReservations?sessionToken={YOUR_SESSION_TOKEN}\n</code></pre> <p>Example Request:</p> <pre><code>curl -X GET \"https://app.nexlayer.io/getReservations?sessionToken=nx_tkn_f8a9b2c3d4e5f6g7h8i9j0\"\n</code></pre> <p>Response:</p> <pre><code>{\n  \"reservedDeployments\": [\n    {\n      \"applicationName\": \"My Mern App\",\n      \"url\": \"https://fantastic-fox-my-mern-app.alpha.nexlayer.ai\"\n    },\n    {\n      \"applicationName\": \"My Python Service\",\n      \"url\": \"https://graceful-gazelle-my-python-service.alpha.nexlayer.ai\"\n    }\n  ]\n}\n</code></pre>"},{"location":"api-reference/readme/#validation-schema","title":"Validation &amp; Schema","text":""},{"location":"api-reference/readme/#get-schema","title":"Get Schema","text":"<p>API endpoint that returns the JSON Schema for defining container-based application deployments on the Nexlayer AI Cloud Platform.</p> <p>Endpoint: <pre><code>GET /schema\n</code></pre></p> <p>Response: Returns a JSON Schema document that validates Nexlayer application deployment configurations.</p> <p>Schema Structure:</p> Field Type Description <code>$schema</code> string JSON Schema draft version <code>title</code> string \"Nexlayer YAML Schema\" <code>description</code> string Human-readable description of the schema purpose <code>type</code> string \"object\" <code>required</code> array Required top-level properties ([\"application\"]) <code>additionalProperties</code> boolean Whether additional properties are allowed <code>properties</code> object Schema properties definition <p>Top-Level Structure:</p> <p>The schema validates YAML/JSON documents with the following structure:</p> <pre><code>application:\n  name: my-application-name\n  url: optional-production-url.com\n  registryLogin:  # Optional, for private images\n    registry: ghcr.io\n    username: your-username\n    personalAccessToken: your-token\n  pods:\n    - name: pod-name\n      image: container-image:tag\n      path: /url-path  # Optional\n      servicePorts: [80]\n      # Additional pod configuration...\n</code></pre> <p>Key Components</p>"},{"location":"api-reference/readme/#application-object","title":"Application Object","text":"Property Type Required Description <code>name</code> string Yes Globally unique application identifier <code>url</code> string No Custom domain for production deployments <code>registryLogin</code> object No Authentication for private registries <code>pods</code> array Yes List of containerized services"},{"location":"api-reference/readme/#pod-object","title":"Pod Object","text":"Property Type Required Description <code>name</code> string Yes Unique pod identifier <code>image</code> string Yes Docker image reference <code>path</code> string No URL route for web-facing pods <code>servicePorts</code> array Yes Port numbers exposed by the pod <code>vars</code> object No Environment variables <code>volumes</code> array No Persistent storage configurations <code>secrets</code> array No Secure storage for sensitive data <code>entrypoint</code> string No Override container entrypoint <code>command</code> string No Override container command <p>Example Usage:</p> <pre><code>application:\n  name: fullstack-app\n  pods:\n    - name: frontend\n      image: my-react-app:latest\n      path: /\n      servicePorts: [3000]\n      vars:\n        API_URL: http://api.pod:8000\n    - name: api\n      image: my-api:latest\n      servicePorts: [8000]\n      vars:\n        DATABASE_URL: postgresql://user:password@db.pod:5432/mydb\n    - name: db\n      image: postgres:14\n      servicePorts: [5432]\n      vars:\n        POSTGRES_USER: user\n        POSTGRES_PASSWORD: password\n        POSTGRES_DB: mydb\n      volumes:\n        - name: postgres-data\n          size: 1Gi\n          mountPath: /var/lib/postgresql\n</code></pre> <p>Notes: - At least one pod must include the <code>path</code> field - For PostgreSQL containers, do NOT mount volumes directly to <code>/var/lib/postgresql/data</code> - Use the <code>&lt;% REGISTRY %&gt;</code> template with private images</p>"},{"location":"api-reference/readme/#validate-configuration","title":"Validate Configuration","text":"<p>Validates a <code>nexlayer.yaml</code> file without deploying it.</p> <pre><code>POST /validate\n</code></pre> <p>Request Headers:</p> Header Value Description <code>Content-Type</code> <code>application/json</code> JSON request format <p>Request Body:</p> <p>Your nexlayer application configuration as a JSON object.</p> <p>Example Request:</p> <pre><code>curl -X POST \"https://app.nexlayer.io/validate\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"application\": {...}}'\n</code></pre> <p>Response:</p> <pre><code>{\n  \"message\": \"Nexlayer YAML file is valid.\"\n}\n</code></pre> <p>Or if invalid:</p> <pre><code>{\n  \"error\": \"Validation failed\",\n  \"details\": [\n    {\n      \"path\": \"application.services[0].image\",\n      \"message\": \"Required field missing\"\n    }\n  ]\n}\n</code></pre>"},{"location":"api-reference/readme/#feedback","title":"Feedback","text":""},{"location":"api-reference/readme/#send-feedback","title":"Send Feedback","text":"<p>Sends feedback about your Nexlayer experience.</p> <pre><code>POST /feedback\n</code></pre> <p>Request Headers:</p> Header Value Description <code>Content-Type</code> <code>application/json</code> JSON request format <p>Request Body:</p> <pre><code>{\n  \"text\": \"Your detailed feedback message here\"\n}\n</code></pre> <p>Example Request:</p> <pre><code>curl -X POST \"https://app.nexlayer.io/feedback\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"text\": \"I love how easy it is to deploy my AI models with Nexlayer!\"}'\n</code></pre> <p>Response:</p> <pre><code>{\n  \"message\": \"Thank you for your feedback!\"\n}\n</code></pre>"},{"location":"api-reference/readme/#error-handling","title":"Error Handling","text":"<p>Nexlayer uses standard HTTP status codes along with detailed error messages:</p> Status Code Description 200 Success 400 Bad Request - Check your request parameters or format 401 Unauthorized - Invalid or expired session token 403 Forbidden - Insufficient permissions 404 Not Found - Resource does not exist 429 Too Many Requests - Rate limit exceeded 500 Internal Server Error - Please contact support <p>Error Response Format:</p> <pre><code>{\n  \"error\": \"A descriptive error message\",\n  \"code\": \"ERROR_CODE\",\n  \"details\": [\n    {\n      \"field\": \"fieldName\",\n      \"message\": \"Specific error about this field\"\n    }\n  ]\n}\n</code></pre>"},{"location":"api-reference/readme/#rate-limits","title":"Rate Limits","text":"<p>To ensure service stability, Nexlayer implements the following rate limits:</p> Endpoint Rate Limit <code>/startUserDeployment</code> 10 requests per minute <code>/extendDeployment</code> 5 requests per minute <code>/claimDeployment</code> 5 requests per minute Other endpoints 60 requests per minute <p>When rate limits are exceeded, the API returns a <code>429 Too Many Requests</code> status code. Implement exponential backoff in your clients for optimal handling.</p>"},{"location":"api-reference/readme/#best-practices","title":"Best Practices","text":""},{"location":"api-reference/readme/#security","title":"Security","text":"<ul> <li>Store session tokens securely, never in client-side code or public repositories</li> <li>Use HTTPS for all requests to Nexlayer API</li> <li>Implement proper error handling in your applications</li> <li>Rotate session tokens regularly for production deployments</li> </ul>"},{"location":"api-reference/readme/#performance","title":"Performance","text":"<ul> <li>Validate your YAML files before deployment to catch errors early</li> <li>Keep track of your deployment lifecycle to extend or claim before expiration</li> <li>Implement caching for frequently accessed resources</li> <li>Use asynchronous processing for deployment operations</li> </ul>"},{"location":"api-reference/readme/#deployment","title":"Deployment","text":"<ul> <li>Follow the principle of immutable infrastructure: recreate deployments rather than modifying them</li> <li>Use semantic versioning for your applications</li> <li>Implement proper logging and monitoring for your deployments</li> <li>Test your deployments in a staging environment before production</li> </ul>"},{"location":"api-reference/readme/#examples","title":"Examples","text":""},{"location":"api-reference/readme/#complete-deployment-workflow","title":"Complete Deployment Workflow","text":"<p>This example demonstrates a complete workflow from deployment to claiming:</p> <pre><code># 1. Start a deployment\nSESSION_INFO=$(curl -X POST \"https://app.nexlayer.io/startUserDeployment\" \\\n  -H \"Content-Type: text/x-yaml\" \\\n  --data-binary @nexlayer.yaml)\n\n# 2. Extract session token and app name\nSESSION_TOKEN=$(echo $SESSION_INFO | jq -r .sessionToken)\nAPP_NAME=$(echo $SESSION_INFO | jq -r .applicationName)\n\n# 3. Wait for deployment to complete\necho \"Deployment started at: $(echo $SESSION_INFO | jq -r .url)\"\necho \"Waiting for deployment to complete...\"\nsleep 30\n\n# 4. Extend the deployment\ncurl -X POST \"https://app.nexlayer.io/extendDeployment\" \\\n  -H \"Content-Type: application/json\" \\\n  -d \"{\\\"applicationName\\\": \\\"$APP_NAME\\\", \\\"sessionToken\\\": \\\"$SESSION_TOKEN\\\"}\"\n\n# 5. Claim the deployment\nCLAIM_INFO=$(curl -X POST \"https://app.nexlayer.io/claimDeployment\" \\\n  -H \"Content-Type: application/json\" \\\n  -d \"{\\\"applicationName\\\": \\\"$APP_NAME\\\", \\\"sessionToken\\\": \\\"$SESSION_TOKEN\\\"}\")\n\necho \"Visit this URL to claim your deployment: $(echo $CLAIM_INFO | jq -r .claimURL)\"\n</code></pre>"},{"location":"api-reference/readme/#managing-multiple-deployments","title":"Managing Multiple Deployments","text":"<p>This example shows how to work with multiple deployments:</p> <pre><code># 1. Start multiple deployments\ncurl -X POST \"https://app.nexlayer.io/startUserDeployment\" \\\n  -H \"Content-Type: text/x-yaml\" \\\n  --data-binary @app1.yaml\n\ncurl -X POST \"https://app.nexlayer.io/startUserDeployment\" \\\n  -H \"Content-Type: text/x-yaml\" \\\n  --data-binary @app2.yaml\n\n# 2. List all your active reservations\ncurl -X GET \"https://app.nexlayer.io/getReservations?sessionToken=$SESSION_TOKEN\"\n\n# 3. Remove specific reservations\ncurl -X POST \"https://app.nexlayer.io/removeDeploymentReservation\" \\\n  -H \"Content-Type: application/json\" \\\n  -d \"{\\\"applicationName\\\": \\\"App1\\\", \\\"sessionToken\\\": \\\"$SESSION_TOKEN\\\"}\"\n\n# 4. Remove all reservations when done\ncurl -X POST \"https://app.nexlayer.io/removeReservations\" \\\n  -H \"Content-Type: application/json\" \\\n  -d \"{\\\"sessionToken\\\": \\\"$SESSION_TOKEN\\\"}\"\n</code></pre>"},{"location":"api-reference/readme/#support","title":"Support","text":"<p>If you need assistance with the Nexlayer API:</p> <ul> <li>Documentation: https://docs.nexlayer.com</li> <li>Email Support: support@nexlayer.com</li> <li>Security Issues: security@nexlayer.com</li> <li>Feedback &amp; Issues: GitHub Issues</li> </ul> <p>\u00a9 2025 AuditDeploy Inc. All rights reserved. Nexlayer is a registered trademark of AuditDeploy Inc.</p>"},{"location":"api-reference/docs/api/readme/","title":"Nexlayer API Reference","text":"<p>Welcome to the Nexlayer API! Deploy, Manage, and Scale AI-powered applications with our simple yet powerful API.</p> <p>\ud83d\ude80 Quick Tip: Get started in minutes by deploying your first AI application. Check out our YAML deployment guide for detailed examples and best practices.</p>"},{"location":"api-reference/docs/api/readme/#authentication","title":"Authentication","text":"<pre><code># Example YAML file (see https://github.com/Nexlayer/nexlayer-deployment-yaml for full spec)\napplication:\n  name: my-first-app\n  pods:\n    - name: webapp\n      image: \"your-username/my-app:v1.0.0\"\n      path: \"/\"\n      servicePorts:\n        - 3000\n\n# Deploy using curl\ncurl -X POST \"https://app.nexlayer.io/startUserDeployment\" \\\n  -H \"Content-Type: text/x-yaml\" \\\n  --data-binary @nexlayer.yaml\n</code></pre> <pre><code>const { NexlayerClient } = require(\"@nexlayer/sdk\");\nconst client = new NexlayerClient();\n\nconst deployment = await client.startDeployment(yamlConfig);\nconst sessionToken = deployment.sessionToken;\n</code></pre> <pre><code>from nexlayer import NexlayerClient\nclient = NexlayerClient()\n\ndeployment = client.start_deployment(yaml_config)\nsession_token = deployment.session_token\n</code></pre> <p>All API requests require authentication using session tokens. You'll receive a session token when starting a deployment, which you'll use for subsequent requests. Learn more about authentication \u2192</p>"},{"location":"api-reference/docs/api/readme/#yaml-configuration","title":"YAML Configuration","text":"<p>For detailed information about configuring your application deployment, including examples for different application types and best practices, visit our Nexlayer Deployment YAML repository.</p> <p>The repository includes:</p> <ul> <li>Complete YAML specification</li> <li>Real-world examples</li> <li>Best practices</li> <li>Common patterns</li> <li>Troubleshooting guides</li> </ul>"},{"location":"api-reference/docs/api/readme/#rate-limits","title":"Rate Limits","text":"<p>\u26a1 Rate Limit: 100 requests per minute per session</p> <p>The API includes rate limit headers in all responses:</p> <pre><code>{\n  \"X-RateLimit-Limit\": \"100\",\n  \"X-RateLimit-Remaining\": \"99\",\n  \"X-RateLimit-Reset\": \"1619123456\"\n}\n</code></pre>"},{"location":"api-reference/docs/api/readme/#core-resources","title":"Core Resources","text":""},{"location":"api-reference/docs/api/readme/#deployments","title":"Deployments","text":"Resource Description Start Deployment Deploy your AI-powered application Extend Deployment Extend your deployment duration Get Pods Status Monitor your deployment status"},{"location":"api-reference/docs/api/readme/#start-deployment","title":"Start Deployment","text":"This endpoint starts a new deployment of your application.  <pre><code>curl -X POST \"https://app.nexlayer.io/startUserDeployment\" \\\n  -H \"Content-Type: text/x-yaml\" \\\n  --data-binary @nexlayer.yaml\n</code></pre> <pre><code># nexlayer.yaml\napplication:\n  name: My AI App\n  pods:\n    - name: ai-app\n      image: \"your-username/my-ai-app:v1.0.0\"\n      path: \"/\"\n      servicePorts:\n        - 3000\n</code></pre> <pre><code>const deployment = await client.startDeployment(yamlConfig);\nconsole.log(deployment.url);\n</code></pre>"},{"location":"api-reference/docs/api/readme/#extend-deployment","title":"Extend Deployment","text":"Extend the duration of your running deployment.  <pre><code>curl -X POST \"https://app.nexlayer.io/extendDeployment\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"applicationName\": \"My AI App\",\n    \"sessionToken\": \"your-session-token\"\n  }'\n</code></pre> <pre><code>const extension = await client.extendDeployment(\"My AI App\");\nconsole.log(extension.message);\n</code></pre>"},{"location":"api-reference/docs/api/readme/#get-pods-status","title":"Get Pods Status","text":"Monitor the status of your deployment's pods.  <pre><code>curl -X POST \"https://app.nexlayer.io/getPodsStatus\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"sessionToken\": \"your-session-token\",\n    \"applicationName\": \"My AI App\"\n  }'\n</code></pre> <pre><code>const status = await client.getPodsStatus(\"My AI App\");\nconsole.log(status.pods);\n</code></pre>"},{"location":"api-reference/docs/api/readme/#error-handling","title":"Error Handling","text":"<p>\ud83d\udea8 Example Error Response:</p> <pre><code>{\n  \"error\": \"Invalid session token\",\n  \"code\": \"INVALID_TOKEN\"\n}\n</code></pre> <p>The API uses conventional HTTP response codes:</p> Code Description 200 Success 400 Bad Request - Invalid parameters 401 Unauthorized - Invalid session token 429 Too Many Requests - Rate limit exceeded 500 Server Error - Please contact support"},{"location":"api-reference/docs/api/readme/#best-practices","title":"Best Practices","text":""},{"location":"api-reference/docs/api/readme/#security","title":"Security","text":"<ul> <li>Never share session tokens</li> <li>Use HTTPS for all requests</li> <li>Implement proper token rotation</li> <li>Store tokens securely</li> </ul>"},{"location":"api-reference/docs/api/readme/#performance","title":"Performance","text":"<ul> <li>Cache responses when possible</li> <li>Implement request throttling</li> <li>Use exponential backoff for retries</li> <li>Monitor resource usage</li> </ul>"},{"location":"api-reference/docs/api/readme/#development","title":"Development","text":"<ul> <li>Test in staging environment first</li> <li>Implement proper error handling</li> <li>Follow our deployment guidelines</li> <li>Keep dependencies updated</li> </ul>"},{"location":"api-reference/docs/api/readme/#sdks-and-tools","title":"SDKs and Tools","text":""},{"location":"api-reference/docs/api/readme/#need-help","title":"Need Help?","text":"<p>Contact us (support@nexlayer.com)</p>"},{"location":"api-reference/docs/guides/authentication/","title":"Authentication Guide","text":""},{"location":"api-reference/docs/guides/authentication/#overview","title":"Overview","text":"<p>Nexlayer uses session-based authentication to secure API requests. Each deployment session generates a unique token that must be included in subsequent API calls.</p>"},{"location":"api-reference/docs/guides/authentication/#session-tokens","title":"Session Tokens","text":"<p>Session tokens are automatically generated when you start a new deployment. They have the following characteristics:</p> <ul> <li>Format: JWT (JSON Web Token)</li> <li>Expiration: 24 hours from creation</li> <li>Scope: Limited to specific deployment resources</li> <li>Rotation: Automatic rotation available for long-running deployments</li> </ul>"},{"location":"api-reference/docs/guides/authentication/#security-best-practices","title":"Security Best Practices","text":"<ol> <li>Token Storage</li> <li>Never store tokens in client-side code or version control</li> <li>Use secure environment variables or secret management systems</li> <li> <p>Rotate tokens regularly for production deployments</p> </li> <li> <p>Request Security</p> </li> <li>Always use HTTPS for API requests</li> <li>Include tokens in the Authorization header</li> <li> <p>Validate server SSL certificates</p> </li> <li> <p>Error Handling</p> </li> <li>Implement proper token expiration handling</li> <li>Use refresh token flows for long-running operations</li> <li>Log authentication failures securely</li> </ol>"},{"location":"api-reference/docs/guides/authentication/#example-usage","title":"Example Usage","text":"<pre><code># Store token securely in environment\nexport NEXLAYER_SESSION_TOKEN=\"your-session-token\"\n\n# Use token in API requests\ncurl -X GET \"https://app.nexlayer.io/api/v1/deployments\" \\\n  -H \"Authorization: Bearer $NEXLAYER_SESSION_TOKEN\"\n</code></pre>"},{"location":"api-reference/docs/guides/authentication/#yaml-configuration","title":"YAML Configuration","text":"<p>For secure deployment configuration using YAML, refer to our Nexlayer Deployment YAML repository for:</p> <ul> <li>Secure configuration patterns</li> <li>Environment variable usage</li> <li>Secret management</li> <li>Access control examples</li> </ul>"},{"location":"api-reference/docs/guides/authentication/#rate-limiting","title":"Rate Limiting","text":"<p>Authentication is subject to the following rate limits:</p> <ul> <li>100 requests per minute per token</li> <li>1000 requests per hour per token</li> <li>Burst capacity of 200 requests</li> </ul> <p>Exceeding these limits will result in HTTP 429 responses. Implement appropriate retry logic with exponential backoff.</p>"},{"location":"api-reference/docs/guides/authentication/#support","title":"Support","text":"<p>For authentication issues or security concerns, contact our support team:</p> <ul> <li>Email: support@nexlayer.io</li> <li>Security issues: security@nexlayer.io</li> <li>Documentation: https://docs.nexlayer.io </li> </ul>"},{"location":"api-reference/docs/guides/quickstart/","title":"Quick Start Guide","text":"<p>Welcome to the Nexlayer API! This guide will help you get started with using our API to manage deployments and monitor your applications.</p>"},{"location":"api-reference/docs/guides/quickstart/#prerequisites","title":"Prerequisites","text":"<ul> <li>A Nexlayer account</li> <li>Basic understanding of REST APIs</li> <li>Familiarity with YAML configuration</li> <li>cURL or a similar HTTP client</li> </ul>"},{"location":"api-reference/docs/guides/quickstart/#authentication","title":"Authentication","text":"<p>All API requests require a session token. You can obtain a session token by starting a deployment:</p> <pre><code>curl -X POST \"https://app.nexlayer.io/startUserDeployment\" \\\n  -H \"Content-Type: text/x-yaml\" \\\n  --data-binary @nexlayer.yaml\n</code></pre> <p>The response will include a <code>sessionToken</code> that you'll use for subsequent requests.</p>"},{"location":"api-reference/docs/guides/quickstart/#starting-a-deployment","title":"Starting a Deployment","text":"<ol> <li>Create a YAML configuration file (<code>nexlayer.yaml</code>):</li> </ol> <pre><code>application:\n  name: My MERN App\n  pods:\n  - name: mongo\n    image: my-username/my-mongo:v1.0.0\n    vars:\n      MONGO_INITDB_ROOT_USERNAME: mongo\n      MONGO_INITDB_ROOT_PASSWORD: passw0rd\n      MONGO_INITDB_DATABASE: todo\n    servicePorts:\n    - 27017\n    volumes:\n    - name: mongo-data-volume\n      size: 2Gi\n      mountPath: /data\n  - name: express\n    image: my-username/my-express:v1.0.0\n    vars:\n      MONGODB_URL: mongodb://mongo:passw0rd@mongo.pod:27017/\n    servicePorts:\n    - 3000\n  - name: react\n    path: /\n    tag: my-username/my-react:v1.0.0\n    vars:\n      EXPRESS_URL: http://express.pod:3000\n    servicePorts:\n    - 80\n</code></pre> <ol> <li>Start the deployment:</li> </ol> <pre><code>curl -X POST \"https://app.nexlayer.io/startUserDeployment\" \\\n  -H \"Content-Type: text/x-yaml\" \\\n  --data-binary @nexlayer.yaml\n</code></pre> <ol> <li>The response will include:</li> <li>Deployment URL</li> <li>Session token</li> <li>Status information</li> <li>Extension and claim instructions</li> </ol>"},{"location":"api-reference/docs/guides/quickstart/#monitoring-deployment-status","title":"Monitoring Deployment Status","text":"<p>Check the status of your pods:</p> <pre><code>curl -X POST \"https://app.nexlayer.io/getPodsStatus\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"sessionToken\": \"your-session-token\",\n    \"applicationName\": \"My MERN App\"\n  }'\n</code></pre>"},{"location":"api-reference/docs/guides/quickstart/#extending-deployment-duration","title":"Extending Deployment Duration","text":"<p>If you need more time with your deployment:</p> <pre><code>curl -X POST \"https://app.nexlayer.io/extendDeployment\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"applicationName\": \"My MERN App\",\n    \"sessionToken\": \"your-session-token\"\n  }'\n</code></pre>"},{"location":"api-reference/docs/guides/quickstart/#best-practices","title":"Best Practices","text":"<ol> <li>Error Handling</li> <li>Always check response status codes</li> <li>Implement proper error handling</li> <li> <p>Use exponential backoff for retries</p> </li> <li> <p>Rate Limiting</p> </li> <li>Respect rate limits (100 requests per minute)</li> <li>Implement request throttling</li> <li> <p>Cache responses when appropriate</p> </li> <li> <p>Security</p> </li> <li>Never share your session tokens</li> <li>Use HTTPS for all requests</li> <li>Implement proper token rotation</li> </ol>"},{"location":"api-reference/docs/guides/quickstart/#next-steps","title":"Next Steps","text":"<ul> <li>Explore the full API reference</li> <li>Visit our GitHub repository </li> </ul>"},{"location":"api-reference/examples/go/readme/","title":"Nexlayer Go Example","text":"<p>This example demonstrates how to deploy an application to Nexlayer using Go.</p>"},{"location":"api-reference/examples/go/readme/#prerequisites","title":"Prerequisites","text":"<ul> <li>Go 1.16 or newer</li> <li>A valid <code>nexlayer.yaml</code> configuration file in this directory</li> </ul>"},{"location":"api-reference/examples/go/readme/#usage","title":"Usage","text":"<ol> <li>Build the example:    <pre><code>go build -o deploy deployment.go\n</code></pre></li> <li>Run the deployment script:    <pre><code>./deploy\n</code></pre></li> </ol> <p>The script will: - Read your <code>nexlayer.yaml</code> file - POST it to the Nexlayer API - Print the deployment URL and session token from the response</p>"},{"location":"api-reference/examples/go/readme/#example-output","title":"Example Output","text":"<pre><code>Deployment started successfully!\nURL: https://fantastic-fox-my-mern-app.alpha.nexlayer.ai\nSession Token: nx_tkn_f8a9b2c3d4e5f6g7h8i9j0\n</code></pre> <p>For more information, see the Nexlayer YAML Guide. </p>"},{"location":"deployment/advanced/","title":"Advanced","text":"Nexlayer Advanced Mode: Enterprise-Grade Deployment <p> Deploy, scale, and secure your AI-powered cloud apps with confidence. Production-ready YAML, best-in-class security, and seamless developer experience for senior engineers &amp; CTOs. </p>"},{"location":"deployment/advanced/#navigation","title":"\ud83d\udcda Navigation","text":"<ul> <li>Quickstart</li> <li>Key Concepts</li> <li>Using Your Own Images</li> <li>Adding AI Models</li> <li>Security Overview</li> <li>Pod Communication</li> <li>Volume Mounts</li> <li>Recommended Security Practices</li> <li>Deployment Example</li> <li>End-to-End Deployment Workflow</li> <li>Quick Tips &amp; Gotchas</li> <li>Advanced CI/CD Integration</li> <li>Enterprise-Grade Example</li> <li>FAQ</li> <li>Troubleshooting</li> <li>Support &amp; Community</li> </ul>"},{"location":"deployment/advanced/#quickstart","title":"\ud83d\ude80 Quickstart","text":"<p>Get started in minutes!</p> <ol> <li>Install Docker Desktop (required for building images)</li> <li>Clone this repo or create your own project directory.</li> <li>Write your <code>Dockerfile</code> for your app or service.</li> <li>Build and push your image to a registry (see Using Your Own Images).</li> <li>Copy the advanced YAML template from this guide or use the Deployment Template Builder.</li> <li>Deploy with the CLI or API:</li> </ol> <pre><code>curl -X POST https://api.nexlayer.io/deploy \\\n  -F \"file=@nexlayer.yaml\"\n</code></pre> <p>Tip: No API key required for first deployment! Nexlayer is ungated\u2014just upload your YAML and go live instantly.</p>"},{"location":"deployment/advanced/#key-concepts","title":"\ud83e\udded Key Concepts","text":"<ul> <li>Declarative YAML: Define your entire stack in a single file.</li> <li>Pod-based Architecture: Each service runs in its own isolated container.</li> <li>Service Discovery: Use <code>&lt;pod-name&gt;.pod</code> for seamless internal networking.</li> <li>Secrets Management: Mount secrets as files, never expose in env vars.</li> <li>Auto-Scaling: Nexlayer handles scaling and resource allocation for you.</li> </ul>"},{"location":"deployment/advanced/#architecture-overview","title":"\ud83d\udcca Architecture Overview","text":"<pre><code>graph TD\n  subgraph NexlayerCloud[\"Nexlayer AI Cloud Cluster\"]\n    Frontend[\"Frontend Pod\"]\n    Backend[\"Backend Pod\"]\n    DB[(Postgres DB)]\n    AI[\"Self-Hosted AI Model\"]\n    Cache[(Redis)]\n    Queue[(RabbitMQ)]\n    Analytics[\"Analytics Service\"]\n    Prometheus[\"Prometheus\"]\n    Grafana[\"Grafana\"]\n  end\n  Frontend --&gt; Backend\n  Backend --&gt; DB\n  Backend --&gt; AI\n  Backend --&gt; Cache\n  Backend --&gt; Queue\n  Analytics --&gt; DB\n  Prometheus --&gt; Backend\n  Grafana --&gt; Prometheus</code></pre> <p>Note: Replace with your own architecture diagram or use the Mermaid Live Editor to customize.</p>"},{"location":"deployment/advanced/#what-is-nexlayer","title":"\ud83e\uddbe \u2601 What is Nexlayer?","text":"<p>Nexlayer is an AI-powered cloud built for developers who want to ship faster, scale effortlessly, and skip the DevOps headaches.</p> <p>Define your app's structure in a simple YAML file, and Nexlayer automates everything\u2014provisioning, scaling, networking, and security\u2014so you can focus on building, not configuring. No Kubernetes wrangling, no complex infra setup.</p> <p>Unlike legacy platforms, Nexlayer is AI-native and designed for modern apps, AI models, and scalable backends\u2014without vendor lock-in or unnecessary complexity. Write YAML, deploy, and go.</p>"},{"location":"deployment/advanced/#why-nexlayer","title":"\u26a1\ufe0f Why Nexlayer?","text":"<ul> <li>\u2705 Zero DevOps \u2013 Write YAML, deploy, done.</li> <li>\u2705 Auto-Scaling \u2013 Handles traffic spikes automatically.</li> <li>\u2705 Built-in Security \u2013 Secrets management &amp; encrypted storage.</li> <li>\u2705 AI &amp; ML Ready \u2013 Deploy AI models with zero friction.</li> <li>\u2705 Effortless Networking \u2013 Services auto-discover, no networking configs.</li> <li>\u2705 Simple Deployments \u2013 No infra setup</li> <li>\u2705 Stack-Agnostic \u2013 Works with APIs, web apps, AI services, and more.</li> </ul> <p>\ud83d\ude80 Less setup, more shipping.</p>"},{"location":"deployment/advanced/#quick-start-deploy-in-5-minutes","title":"\ud83d\udd25 Quick Start: Deploy in 5 Minutes","text":"<p>Let's get your first app running on Nexlayer right now:</p>"},{"location":"deployment/advanced/#step-1-create-a-file-named-nexlayeryaml","title":"Step 1: Create a file named <code>nexlayer.yaml</code>","text":""},{"location":"deployment/advanced/#step-2-copy-this-starter-template","title":"Step 2: Copy this starter template","text":"<pre><code>application: # The name of the deployment\n  name: \"my-first-app\" # Required: Globally unique application identifier\n  # url: \"www.example.ai\"  # Optional: Include only for permanent deployments\n  pods: # Required: List of containers\n    - name: webapp # Required: Must start with lowercase letter, use only alphanumeric, hyphens, or dots\n      image: \"your-username/my-app:v1.2.0\" # Required: Docker image (must be hosted on registry)\n      path: / # Optional: URL path where the service is accessible (only required for web-facing pods)\n      servicePorts: # Required: List of ports exposed by this pod\n        - 80 # Format: Simple list of integers\n</code></pre> <p>\ud83d\udca1 Tip: If you prefer a more interactive way to create your <code>nexlayer.yaml</code>, try our Deployment Template Builder. It lets you visually configure your application and generates the YAML for you\u2014no manual coding needed!</p>"},{"location":"deployment/advanced/#step-3-deploy-it","title":"Step 3: Deploy it!","text":"<p>That's it! You just deployed a web service to Nexlayer. Let's understand what you did...</p>"},{"location":"deployment/advanced/#yaml-building-blocks","title":"\ud83e\udde9 YAML Building Blocks","text":"<p>Nexlayer YAML has a simple structure:</p> <pre><code>application\n\u251c\u2500\u2500 name: Your app's name\n\u251c\u2500\u2500 url: Your app's URL (optional)\n\u251c\u2500\u2500 registryLogin (optional for private images)\n\u2514\u2500\u2500 pods: List of containers\n    \u251c\u2500\u2500 Pod 1 (like a web server)\n    \u2502   \u251c\u2500\u2500 name: pod name\n    \u2502   \u251c\u2500\u2500 image: container image\n    \u2502   \u251c\u2500\u2500 path: web route\n    \u2502   \u251c\u2500\u2500 servicePorts: exposed ports\n    \u2502   \u2502   \u2514\u2500\u2500 - port number\n    \u2502   \u251c\u2500\u2500 vars: environment variables\n    \u2502   \u2502   \u251c\u2500\u2500 ENV_VAR1: value1\n    \u2502   \u2502   \u2514\u2500\u2500 ENV_VAR2: value2\n    \u2502   \u251c\u2500\u2500 volumes: persistent storage\n    \u2502   \u2502   \u2514\u2500\u2500 - name: volume name\n    \u2502   \u2502       \u251c\u2500\u2500 size: storage size\n    \u2502   \u2502       \u2514\u2500\u2500 mountPath: storage location\n    \u2502   \u2514\u2500\u2500 secrets: sensitive data\n    \u2502       \u2514\u2500\u2500 - name: secret name\n    \u2502           \u251c\u2500\u2500 data: secret content\n    \u2502           \u251c\u2500\u2500 mountPath: secret location\n    \u2502           \u2514\u2500\u2500 fileName: secret file name\n    \u2502\n    \u251c\u2500\u2500 Pod 2 (like a database)\n    \u2502   \u2514\u2500\u2500 ...\n    \u2514\u2500\u2500 Pod 3 (like a cache)\n        \u2514\u2500\u2500 ...\n</code></pre> <p>Each pod is a container that runs a specific part of your application. They automatically talk to each other!</p>"},{"location":"deployment/advanced/#image-management","title":"\ud83d\uddbc\ufe0f Image Management","text":"<p>Nexlayer requires all Docker images to be hosted on a registry\u2014local images aren't supported since it's a cloud platform.</p>"},{"location":"deployment/advanced/#public-images-on-docker-hub","title":"Public Images on Docker Hub","text":"<p>Use your own public image with the format your-username/my-app:: <pre><code>application:\n  pods:\n    - name: \"app\"\n      image: \"your-username/my-app:v1.2.0\" # Your public image on Docker Hub\n</code></pre> <p>If you omit the tag (e.g., your-username/my-app), Docker Hub defaults to :latest.</p> <p>Note: Generic images like nginx:latest work locally but aren't suitable for your app on Nexlayer\u2014push your own image instead.</p>"},{"location":"deployment/advanced/#public-images-on-ghcrio","title":"Public Images on GHCR.io","text":"<p>Use ghcr.io/your-username/my-app: for public images on GitHub Container Registry: <pre><code>application:\n  pods:\n    - name: \"app\"\n      image: \"ghcr.io/your-username/my-app:v1.2.0\" # Your public image on GHCR.io\n</code></pre> <p>Without a tag (e.g., ghcr.io/your-username/my-app), it defaults to :latest.</p>"},{"location":"deployment/advanced/#private-images","title":"Private Images","text":"<p>For private images on any registry (e.g., GHCR.io or Docker Hub), use &lt;% REGISTRY %&gt; with authentication:</p> <pre><code>application:\n  registryLogin:\n    registry: \"ghcr.io\" # Registry hostname (e.g., ghcr.io, docker.io)\n    username: \"your-username\" # Registry username - case sensitive!\n    personalAccessToken: \"your-token\" # Registry access token/password\n  pods:\n    - name: \"app\"\n      image: \"&lt;% REGISTRY %&gt;/your-username/my-app:v1.2.0\" # Private image\n</code></pre> <p>Omitting the tag (e.g., &lt;% REGISTRY %&gt;/your-username/my-app) defaults to :latest.</p> <p>Tip: Specify tags (e.g., v1.2.0) for consistency; :latest might pull unexpected updates.</p>"},{"location":"deployment/advanced/#visual-diagrams","title":"\ud83d\udcca Visual Diagrams","text":""},{"location":"deployment/advanced/#pod-interactions-flowchart","title":"Pod Interactions Flowchart","text":"<p>Here's how pods connect to each other in a typical fullstack application:</p> <pre><code>graph TD\n    subgraph NexlayerCloud[\"Nexlayer AI Cloud Cluster\"]\n        %% Frontend app\n        Frontend[Next.js Frontend&lt;br&gt;path: '/'&lt;br&gt;Port: 3000]\n\n        %% Backend app\n        Backend[FastAPI Backend&lt;br&gt;path: '/api'&lt;br&gt;Port: 8000]\n\n        %% Databases\n        DB[(PostgreSQL&lt;br&gt;Port: 5432)]\n        VectorDB[(Pinecone Vector DB&lt;br&gt;Port: 8080)]\n    end\n\n    %% External entities\n    ExternalAPI[OpenAI API]\n\n    %% Relationships\n    Frontend --&gt;|fastapi.pod:8000| Backend\n    Backend --&gt;|postgresql://postgres.pod:5432/mydb| DB\n    Backend --&gt;|pinecone.pod:8080| VectorDB\n    Backend --&gt;|API calls| ExternalAPI\n\n    %% Styling\n    classDef app fill:#ACFFFC,color:black,stroke:#ccc,stroke-width:2px\n    classDef data fill:#EF8CA4,color:black,stroke:#ccc,stroke-width:2px\n    classDef external fill:#cccccc,color:black,stroke:#999,stroke-width:2px\n    classDef nexlayer fill:#f2f2f2,stroke:#e0e0e0,stroke-width:1px\n\n    class Frontend,Backend app\n    class DB,VectorDB data\n    class ExternalAPI external\n    class NexlayerCloud nexlayer</code></pre> <p>This diagram shows how Nexlayer's automatic service discovery works:</p> <ul> <li>The Next.js frontend connects to the FastAPI backend using fastapi.pod:8000</li> <li>The FastAPI backend connects to PostgreSQL using postgres.pod:5432</li> <li>The FastAPI backend also connects to Pinecone vector database using pinecone.pod:8080</li> <li>The FastAPI backend connects to external OpenAI API (external services work normally)</li> </ul> <p>Each pod can reference other pods using the .pod syntax without worrying about IP addresses."},{"location":"deployment/advanced/#yaml-structure-map","title":"YAML Structure Map","text":"<p>This map shows the hierarchical structure of a Nexlayer YAML file for an AI-powered application:</p> <pre><code>application\n\u251c\u2500\u2500 name: \"ai-powered-app\"\n\u251c\u2500\u2500 url: \"https://myai.example.com\" (optional)\n\u251c\u2500\u2500 registryLogin (optional)\n\u2502   \u251c\u2500\u2500 registry: \"registry.example.com\"\n\u2502   \u251c\u2500\u2500 username: \"myuser\"\n\u2502   \u2514\u2500\u2500 personalAccessToken: \"mypat123\"\n\u2514\u2500\u2500 pods\n    \u251c\u2500\u2500 next-frontend\n    \u2502   \u251c\u2500\u2500 name: \"nextjs\"\n    \u2502   \u251c\u2500\u2500 image: \"vercel/next:latest\"\n    \u2502   \u251c\u2500\u2500 path: \"/\"\n    \u2502   \u251c\u2500\u2500 servicePorts: [3000]\n    \u2502   \u2514\u2500\u2500 vars:\n    \u2502       \u2514\u2500\u2500 BACKEND_URL: \"http://fastapi.pod:8000\"\n    \u251c\u2500\u2500 fastapi-backend\n    \u2502   \u251c\u2500\u2500 name: \"fastapi\"\n    \u2502   \u251c\u2500\u2500 image: \"tiangolo/fastapi:latest\"\n    \u2502   \u251c\u2500\u2500 path: \"/api\"\n    \u2502   \u251c\u2500\u2500 servicePorts:\n    \u2502   \u2502   \u2514\u2500\u2500 - 8000\n    \u2502   \u251c\u2500\u2500 vars:\n    \u2502   \u2502   \u251c\u2500\u2500 DATABASE_URL: \"postgresql://postgres:password@postgres.pod:5432/mydb\"\n    \u2502   \u2502   \u251c\u2500\u2500 PINECONE_URL: \"http://pinecone.pod:8080\"\n    \u2502   \u2502   \u2514\u2500\u2500 OPENAI_API_KEY: \"sk-...\" # Set via secrets instead for production\n    \u2502   \u2514\u2500\u2500 secrets:\n    \u2502       \u2514\u2500\u2500 name: \"api-keys\"\n    \u2502           data: \"your-openai-key-here\"\n    \u2502           mountPath: \"/app/secrets\"\n    \u2502           fileName: \"openai.key\"\n    \u251c\u2500\u2500 postgres-db\n    \u2502   \u251c\u2500\u2500 name: \"postgres\"\n    \u2502   \u251c\u2500\u2500 image: \"postgres:14\"\n    \u2502   \u251c\u2500\u2500 servicePorts: [5432]\n    \u2502   \u251c\u2500\u2500 vars:\n    \u2502   \u2502   \u251c\u2500\u2500 POSTGRES_USER: \"postgres\"\n    \u2502   \u2502   \u251c\u2500\u2500 POSTGRES_PASSWORD: \"password\"\n    \u2502   \u2502   \u2514\u2500\u2500 POSTGRES_DB: \"mydb\"\n    \u2502   \u2514\u2500\u2500 volumes:\n    \u2502       \u2514\u2500\u2500 name: \"postgres-data\"\n    \u2502           size: \"5Gi\"\n    \u2502           mountPath: \"/var/lib/postgresql/data\"\n    \u2514\u2500\u2500 pinecone-vector-db\n        \u251c\u2500\u2500 name: \"pinecone\"\n        \u251c\u2500\u2500 image: \"pinecone/pinecone-server:latest\"\n        \u251c\u2500\u2500 servicePorts: [8080]\n        \u2514\u2500\u2500 volumes:\n            \u2514\u2500\u2500 name: \"vector-data\"\n                size: \"10Gi\"\n                mountPath: \"/data\"\n</code></pre> <p>This visualization helps you understand how different elements of your configuration relate to each other.</p>"},{"location":"deployment/advanced/#common-app-patterns","title":"\ud83d\udee0\ufe0f Common App Patterns","text":""},{"location":"deployment/advanced/#simple-website","title":"\ud83d\udcbb Simple Website","text":"<pre><code>application:\n  name: \"my-website\" # Required: Globally unique application name\n  pods:\n    - name: web # Required: Unique pod name\n      image: your-username/my-app:v1.2.0 # Required: Docker image from registry\n      path: / # Optional: URL route (must start with /)\n      servicePorts: # Required: List of exposed ports\n        - 80 # Format: Simple integer\n</code></pre>"},{"location":"deployment/advanced/#frontend-backend-database","title":"\ud83d\udd04 Frontend + Backend + Database","text":"<pre><code>application:\n  name: \"fullstack-app\"\n  pods:\n    - name: frontend\n      image: \"your-username/frontend-app:v1.0.0\" # Your public image on Docker Hub\n      path: /\n      servicePorts:\n        - 3000\n      vars: # Environment variables as key-value pairs\n        API_URL: \"http://backend.pod:4000\" # Reference other pods with .pod suffix\n\n    - name: backend\n      image: \"your-username/backend-app:v1.0.0\" # Your public image on Docker Hub\n      path: /api # Path must start with /\n      servicePorts:\n        - 4000\n      vars:\n        DATABASE_URL: \"postgresql://user:pass@database.pod:5432/mydb\" # Proper inter-pod reference\n\n    - name: database\n      image: \"postgres:14\" # Standard database image from Docker Hub\n      servicePorts:\n        - 5432\n      vars:\n        POSTGRES_USER: \"user\"\n        POSTGRES_PASSWORD: \"pass\"\n        POSTGRES_DB: \"mydb\"\n      volumes:\n        - name: db-data # Unique volume name\n          size: \"1Gi\" # Storage size with units (Mi, Gi, Ti)\n          mountPath: \"/var/lib/postgresql/data\" # Must start with /\n</code></pre>"},{"location":"deployment/advanced/#ai-application-template","title":"\ud83e\udde0 AI Application Template","text":"<pre><code>application:\n  name: \"ai-app\"\n  pods:\n    - name: frontend\n      image: \"your-username/ai-frontend:v1.0.0\" # Your public image on Docker Hub\n      path: /\n      servicePorts:\n        - 3000\n      vars:\n        API_URL: \"http://ai-backend.pod:5000\" # Note .pod suffix for pod reference\n\n    - name: ai-backend\n      image: \"your-username/ai-backend:v1.0.0\" # Your public image on Docker Hub\n      servicePorts:\n        - 5000\n      vars:\n        MODEL_PATH: \"/models\" # Path starts with /\n        VECTOR_DB: \"http://vector-db.pod:8080\" # Note .pod suffix\n      volumes:\n        - name: model-storage\n          size: \"5Gi\"\n          mountPath: \"/models\" # Path starts with /\n\n    - name: vector-db\n      image: \"weaviate/weaviate:latest\" # Standard vector database image\n      servicePorts:\n        - 8080\n      volumes:\n        - name: vector-data\n          size: \"2Gi\"\n          mountPath: \"/data\" # Path starts with /\n</code></pre>"},{"location":"deployment/advanced/#cheat-sheet-pod-configuration","title":"\ud83d\udd0d Cheat Sheet: Pod Configuration","text":"Key Definition Why it matters Examples name A unique name to identify this service. Each little machine (pod) must work correctly for your app to run\u2014if one machine breaks, your whole app might not work and your friends wouldn't be able to use it. <code>name: postgres</code> image Specifies the Docker container image (including repository info) to deploy for that pod. The image must be hosted and, for private images, follow the <code>&lt;% REGISTRY %&gt;/&lt;...&gt;</code> format. This tells Nexlayer exactly which pre-built container to use for your live app. Choosing a solid image means your app runs in a proven, ready-to-go environment for all your users. <code>image: \"postgres:latest\"</code> or <code>image: \"cooldb/image:1.0\"</code> path For web-facing pods, defines the external URL route where users access the service. This sets the web address path where users access your service. A well-defined path means your website, service or API is easily found, making your app look friendly and professional on Nexlayer Cloud. <code>path: \"/\"</code> or <code>path: \"/api\"</code> servicePorts Defines the ports for external access or inter-service communication. These ports are like the doorways that let users (or other services) connect to your app. Set them correctly, and your live app will be easily accessible and reliable on the web. <code>servicePorts: - 5432</code> vars Runtime environment variables defined as direct key-value pairs. Use <code>&lt;pod-name&gt;.pod</code> to reference other pods or <code>&lt;% URL %&gt;</code> for the deployment's base URL. These are the settings that tell your live app how to connect to databases, APIs, and more. When they're set up right, your app adapts perfectly to the cloud environment, keeping your users happy. <code>vars:</code><code>POSTGRES_USER: postgres</code><code>POSTGRES_PASSWORD: password</code><code>POSTGRES_DB: mydb</code><code>API_URL: http://backend.pod:3000</code> volumes Optional persistent storage settings that ensure data isn't lost between restarts. Each volume includes a name, size, and a mountPath. Volumes are like cloud hard drives for your app. They store important data (like database files) so that nothing is lost when your app updates or restarts, keeping your users' data safe. <code>volumes: - name: postgres-data size: 5Gi mountPath: /var/lib/postgresql/data</code> mountPath Within a volume configuration, specifies the internal file system location where the volume attaches. Must start with a \"/\". This tells Nexlayer exactly where to plug in your volume within a running container. When set correctly, your live app can read and save data smoothly\u2014ensuring a seamless user experience. <code>mountPath: \"/var/lib/postgresql/data\"</code> secrets Securely mount sensitive data into your app's configuration files. Each secret includes a name, data (raw text or Base64-encoded), a mountPath (must start with \"/\"), and a fileName to name the mounted secret file. Secrets keep your sensitive info locked away safely. By using secrets, you protect passwords and keys while ensuring your app runs securely\u2014giving your users peace of mind. <code>secrets: - name: nextauth-secret data: \"myrandomsecret\" mountPath: \"/var/secrets/nextauth\" fileName: secret.txt</code> <p>Note: There are additional configuration options available in the schema that are managed internally by Nexlayer.</p>"},{"location":"deployment/advanced/#how-pods-talk-to-each-other","title":"\ud83d\udd0c How Pods Talk to Each Other","text":"<p>The magic of Nexlayer: pods automatically discover each other! Use <code>&lt;pod-name&gt;.pod</code> in your configuration:</p> <pre><code>vars:\n  DATABASE_URL: \"postgresql://postgres:postgres@database.pod:5432/myapp\" # CORRECT: Using .pod suffix\n  API_URL: \"http://api.pod:8000\" # References another pod named \"api\"\n  SITE_URL: \"&lt;% URL %&gt;/dashboard\" # References the deployment's base URL\n</code></pre> <p>You can use:</p> <ul> <li><code>&lt;pod-name&gt;.pod</code> to reference other pods (required when connecting services)</li> <li><code>&lt;% URL %&gt;</code> to reference the URL of your deployment site</li> </ul>"},{"location":"deployment/advanced/#storing-data-with-volumes","title":"\ud83d\udcbe Storing Data with Volumes","text":"<p>Keep your data safe between restarts:</p> <pre><code>volumes:\n  - name: my-data # Give it a name\n    size: \"1Gi\" # How much space (1Gi = 1 Gigabyte)\n    mountPath: \"/data\" # Where to find it in your container (must start with /)\n</code></pre>"},{"location":"deployment/advanced/#do-i-need-to-use-mountpath-like-varlibpostgresqldata","title":"\ud83e\udde0 Do I Need to Use <code>mountPath</code> Like <code>/var/lib/postgresql/data</code>?","text":"<p>Short answer: Not always.</p> <p>Nexlayer simplifies how volumes are mounted by handling common defaults internally.</p> <p>If you're using a standard, publicly hosted image like <code>postgres</code>, <code>redis</code>, or <code>mongo</code>, Nexlayer automatically mounts volumes to the correct internal paths \u2014 so you don't need to explicitly specify <code>mountPath</code> unless:</p> <ul> <li>\u2705 You're using a custom image that expects data in a specific directory</li> <li>\u2705 You have explicit logic in your app that reads/writes from a known file path</li> <li>\u2705 You're mounting secrets to a specific location in the filesystem</li> </ul> <pre><code># \u2705 Optional if using a known image like postgres\nvolumes:\n  - name: postgres-data\n    size: \"5Gi\"\n    # mountPath: \"/var/lib/postgresql/data\"  # Optional \u2013 Nexlayer auto-mounts for postgres\n</code></pre> <p>The Nexlayer platform abstracts path requirements for standard services. Keep your YAML cleaner by omitting mountPath unless your container specifically needs it.</p>"},{"location":"deployment/advanced/#keeping-secrets-safe","title":"\ud83d\udd10 Keeping Secrets Safe","text":"<p>Store API keys, passwords, and other sensitive data securely:</p> <pre><code>secrets:\n  - name: api-keys # Unique name within pod\n    data: \"my-super-secret-api-key\" # Actual secret value\n    mountPath: \"/var/secrets\" # Must start with /\n    fileName: \"api-key.txt\" # Name of the file containing the secret\n</code></pre> <p>Your app can then read <code>/var/secrets/api-key.txt</code> to get the secret value.</p>"},{"location":"deployment/advanced/#using-private-images","title":"\ud83d\udc33 Using Private Images","text":"<p>If your Docker images are in a private registry:</p> <pre><code>application:\n  name: \"private-app\"\n  registryLogin: # Required for private images - registry authentication details\n    registry: \"ghcr.io\" # Registry hostname (e.g., ghcr.io, docker.io)\n    username: \"your-username\" # Registry username (case sensitive!)\n    personalAccessToken: \"my-token\" # Read-only registry Personal Access Token\n  pods:\n    - name: private-service\n      # For private images use the following schema exactly as shown:\n      # Images are tagged as private if they include '&lt;% REGISTRY %&gt;'\n      image: \"&lt;% REGISTRY %&gt;/your-username/private-image:latest\" # This gets replaced with the registry above\n      servicePorts:\n        - 3000\n      # ... rest of config\n</code></pre> <p>Note that the username in the image path must match exactly (including case) with the username in <code>registryLogin</code>.</p>"},{"location":"deployment/advanced/#common-mistakes-to-avoid","title":"\ud83d\udea8 Common Mistakes to Avoid","text":"<ol> <li> <p>\u274c Forgetting the <code>application:</code> block at the start    \u2705 Always begin your YAML with <code>application:</code></p> </li> <li> <p>\u274c Using the same pod name twice    \u2705 Each pod name must be unique</p> </li> <li> <p>\u274c Incorrect pod name format    \u2705 Pod names must start with a lowercase letter and can include only alphanumeric characters, hyphens, or dots</p> </li> <li> <p>\u274c Mixing up <code>path</code> and <code>mountPath</code>    \u2705 <code>path</code> is for URL routes (like <code>/api</code>), <code>mountPath</code> is for filesystem paths (like <code>/data</code>)</p> </li> <li> <p>\u274c Forgetting servicePorts    \u2705 Each pod needs servicePorts to be accessible</p> </li> <li> <p>\u274c Incorrect pod references    \u2705 Use <code>&lt;pod-name&gt;.pod</code> to connect services (not IP addresses)</p> </li> <li> <p>\u274c Trying to use Kubernetes or Docker Compose syntax    \u2705 Nexlayer has its own unique YAML schema</p> </li> <li> <p>\u274c DO NOT add <code>resources.limits</code> manually to your YAML.    \u2705 Nexlayer automatically configures CPU &amp; Memory for each service.    \u2705 If you add <code>resources.limits</code> manually, it will be ignored.</p> </li> <li> <p>\u274c Misunderstanding entrypoint and command behavior    \u2705 If entrypoint and command are explicitly defined in Docker Compose, the Nexlayer-CLI will translate them into Nexlayer YAML.    \u2705 If they are not defined in Docker Compose, the Nexlayer-CLI omits them, defaulting to the Dockerfile's built-in values.</p> </li> <li> <p>\u274c Using array format for environment variables     \u2705 Use direct key-value pairs for environment variables:</p> <pre><code>vars:\n  ENV_VAR_KEY: \"value\" # CORRECT\n</code></pre> <pre><code>vars:\n  - key: \"ENV_VAR_KEY\" # INCORRECT\n    value: \"value\"\n</code></pre> </li> <li> <p>\u274c Trying to use local Docker images     \u2705 All images must be hosted on a registry (Docker Hub, GHCR.io, etc.)</p> </li> <li>\u274c Case mismatch between registry username and image path     \u2705 Ensure the username in your image path exactly matches the registry username (case sensitive)</li> </ol>"},{"location":"deployment/advanced/#full-example-gaming-leaderboard-app","title":"\ud83c\udfae Full Example: Gaming Leaderboard App","text":"<pre><code>application:\n  name: \"game-leaderboard\" # Required: Application name\n  pods:\n    - name: frontend # Required: Unique pod name\n      image: \"your-username/game-ui:v1.0.0\" # Your public image on Docker Hub\n      path: \"/\" # URL route (must start with /)\n      servicePorts: # Required: List of exposed ports\n        - 3000\n      vars: # Environment variables as key-value pairs\n        API_URL: \"http://api.pod:8080\" # Note .pod suffix\n        WEBSOCKET_URL: \"ws://api.pod:8080/ws\" # Note .pod suffix\n\n    - name: api\n      image: \"your-username/game-api:v1.0.0\" # Your public image on Docker Hub\n      path: \"/api\" # Path starts with /\n      servicePorts:\n        - 8080\n      vars:\n        MONGO_URI: \"mongodb://mongo.pod:27017/leaderboard\" # Note .pod suffix\n        REDIS_URL: \"redis://redis.pod:6379\" # Note .pod suffix\n        JWT_SECRET: \"supersecretkey\"\n\n    - name: mongo\n      image: \"mongo:latest\" # Standard database image from Docker Hub\n      servicePorts:\n        - 27017\n      volumes:\n        - name: mongo-data\n          size: \"2Gi\" # Storage size with units\n          mountPath: \"/data/db\" # Must start with /\n\n    - name: redis\n      image: \"redis:latest\" # Standard cache image from Docker Hub\n      servicePorts:\n        - 6379\n      volumes:\n        - name: redis-data\n          size: \"1Gi\"\n          mountPath: \"/data\" # Must start with /\n</code></pre>"},{"location":"deployment/advanced/#real-world-use-cases","title":"\ud83d\udcf1 Real-World Use Cases","text":""},{"location":"deployment/advanced/#social-media-app","title":"Social Media App","text":"<pre><code>application:\n  name: \"social-media\"\n  pods:\n    - name: frontend\n      image: \"your-username/social-frontend:v1.0.0\"\n      path: \"/\"\n      servicePorts:\n        - 3000\n      vars:\n        API_URL: \"http://api.pod:8000\" # Note .pod suffix\n        MEDIA_URL: \"http://media.pod:9000\" # Note .pod suffix\n\n    - name: api\n      image: \"your-username/social-api:v1.0.0\"\n      path: \"/api\" # Path starts with /\n      servicePorts:\n        - 8000\n      vars:\n        DATABASE_URL: \"postgresql://postgres:password@postgres.pod:5432/socialdb\" # Note .pod suffix\n        REDIS_URL: \"redis://redis.pod:6379\" # Note .pod suffix\n        MEDIA_SERVICE: \"http://media.pod:9000\" # Note .pod suffix\n\n    - name: media\n      image: \"your-username/media-service:v1.0.0\"\n      path: \"/media\" # Path starts with /\n      servicePorts:\n        - 9000\n      vars:\n        STORAGE_PATH: \"/data/media\" # Path starts with /\n      volumes:\n        - name: media-storage\n          size: \"10Gi\"\n          mountPath: \"/data/media\" # Must start with /\n\n    - name: postgres\n      image: \"postgres:14\"\n      servicePorts:\n        - 5432\n      vars:\n        POSTGRES_USER: \"postgres\"\n        POSTGRES_PASSWORD: \"password\"\n        POSTGRES_DB: \"socialdb\"\n      volumes:\n        - name: postgres-data\n          size: \"5Gi\"\n          mountPath: \"/var/lib/postgresql/data\" # Must start with /\n\n    - name: redis\n      image: \"redis:latest\"\n      servicePorts:\n        - 6379\n      volumes:\n        - name: redis-data\n          size: \"1Gi\"\n          mountPath: \"/data\" # Must start with /\n</code></pre>"},{"location":"deployment/advanced/#e-commerce-platform","title":"E-Commerce Platform","text":"<pre><code>application:\n  name: \"ecommerce\"\n  pods:\n    - name: storefront\n      image: \"your-username/store-frontend:v2.1.0\"\n      path: \"/\"\n      servicePorts:\n        - 3000\n      vars:\n        API_URL: \"http://api.pod:4000\" # Note .pod suffix\n        STRIPE_PUBLIC_KEY: \"pk_test_123\"\n\n    - name: admin\n      image: \"your-username/admin-panel:v2.1.0\"\n      path: \"/admin\" # Path starts with /\n      servicePorts:\n        - 3001\n      vars:\n        API_URL: \"http://api.pod:4000\" # Note .pod suffix\n\n    - name: api\n      image: \"your-username/ecommerce-api:v2.1.0\"\n      path: \"/api\" # Path starts with /\n      servicePorts:\n        - 4000\n      vars:\n        DATABASE_URL: \"postgresql://postgres:password@postgres.pod:5432/shopdb\" # Note .pod suffix\n        REDIS_URL: \"redis://redis.pod:6379\" # Note .pod suffix\n        ELASTICSEARCH_URL: \"http://elasticsearch.pod:9200\" # Note .pod suffix\n      secrets:\n        - name: stripe-key\n          data: \"sk_test_your_stripe_secret_key\"\n          mountPath: \"/app/secrets\" # Must start with /\n\n    - name: postgres\n      image: \"postgres:14\"\n      servicePorts:\n        - 5432\n      vars:\n        POSTGRES_USER: \"postgres\"\n        POSTGRES_PASSWORD: \"password\"\n        POSTGRES_DB: \"shopdb\"\n      volumes:\n        - name: postgres-data\n          size: \"10Gi\"\n          mountPath: \"/var/lib/postgresql/data\" # Must start with /\n\n    - name: redis\n      image: \"redis:latest\"\n      servicePorts:\n        - 6379\n      volumes:\n        - name: redis-data\n          size: \"2Gi\"\n          mountPath: \"/data\" # Must start with /\n\n    - name: elasticsearch\n      image: \"elasticsearch:8.6.0\"\n      servicePorts:\n        - 9200\n      vars:\n        discovery.type: \"single-node\"\n        ES_JAVA_OPTS: \"-Xms512m -Xmx512m\"\n      volumes:\n        - name: es-data\n          size: \"20Gi\"\n          mountPath: \"/usr/share/elasticsearch/data\" # Must start with /\n</code></pre>"},{"location":"deployment/advanced/#deployment-behavior-preview-vs-production","title":"\ud83d\udcdd Deployment Behavior: Preview vs Production","text":"<p>Understanding the <code>url</code> field is important for deployment behavior:</p> <ul> <li>Without <code>url</code> field: Creates a temporary preview deployment (lasts ~2 hours)</li> <li>With <code>url</code> field: Creates a permanent deployment until deleted</li> </ul> <pre><code>application:\n  name: \"my-app\"\n  url: \"www.example.ai\" # Include for permanent deployments, omit for ~2 hour previews\n  # Rest of configuration...\n</code></pre> <p>No need to add the <code>url</code> key if this is not going to be a permanent deployment.</p>"},{"location":"deployment/advanced/#next-steps","title":"\ud83d\ude80 Next Steps","text":"<p>Now that you've mastered the basics, here are some advanced topics to explore:</p> <ol> <li> <p>Custom Domains: Configure your own domains for your Nexlayer applications.</p> </li> <li> <p>Advanced Networking: Learn about creating internal-only services and managing network policies.</p> </li> <li> <p>Observability: Set up logging, monitoring, and alerting for your applications.</p> </li> <li> <p>CI/CD Integration: Automate your deployments with GitHub Actions or other CI/CD tools.</p> </li> <li> <p>Scaling Strategies: Understand how to optimize your application for automatic scaling.</p> </li> </ol>"},{"location":"deployment/advanced/#detailed-schema-reference","title":"\ud83d\udcda Detailed Schema Reference","text":"<p>For a comprehensive reference of all available fields in the Nexlayer YAML schema, visit our detailed documentation.</p>"},{"location":"deployment/advanced/#important-distinctions","title":"\u26a0\ufe0f Important Distinctions","text":""},{"location":"deployment/advanced/#nexlayer-vs-kubernetes","title":"Nexlayer vs. Kubernetes","text":"<p>While Nexlayer abstracts away the complexity of Kubernetes, there are some important distinctions:</p> <ul> <li>Nexlayer YAML is simpler and more focused on application definition rather than infrastructure.</li> <li>Nexlayer handles networking, scaling, and security automatically.</li> <li>Resources are allocated dynamically rather than requiring explicit configuration.</li> <li>Service discovery is automatic with the <code>&lt;pod-name&gt;.pod</code> convention.</li> </ul>"},{"location":"deployment/advanced/#nexlayer-vs-docker-compose","title":"Nexlayer vs. Docker Compose","text":"<p>Nexlayer's YAML format shares some similarities with Docker Compose, but has important differences:</p> <ul> <li>Nexlayer is designed for cloud deployment, not local development.</li> <li>All images must be hosted on a registry, not built or referenced locally.</li> <li>Nexlayer provides automatic service discovery and routing.</li> <li>Nexlayer handles complex networking and security automatically.</li> </ul> <p>Remember, Nexlayer is designed to simplify your deployment workflow while giving you the power to build sophisticated, scalable applications without the typical infrastructure headaches. Happy deploying!</p>"},{"location":"deployment/advanced/#end-to-end-deployment-workflow","title":"\ud83d\udee0\ufe0f End-to-End Deployment Workflow","text":"<p>For advanced users, here's a streamlined, production-ready deployment flow:</p> <ol> <li> <p>Ensure Docker Desktop is running    This lets you build your container image for the correct platform.</p> </li> <li> <p>Create a <code>Dockerfile</code> for your frontend, backend, or service.</p> </li> <li> <p>Build and push your image to a public or private registry (e.g., TTL.sh for previews, GHCR/DockerHub for production, or any major cloud provider):</p> </li> <li> <p>TTL.sh (temporary, great for previews): <pre><code>docker build --platform=linux/amd64 -t ttl.sh/my-advanced-app:1h .\ndocker push ttl.sh/my-advanced-app:1h\n</code></pre></p> </li> <li> <p>GitHub Container Registry (GHCR): <pre><code>docker build --platform=linux/amd64 -t ghcr.io/your-org/your-app:v1.0.0 .\ndocker push ghcr.io/your-org/your-app:v1.0.0\n</code></pre></p> </li> <li> <p>Docker Hub: <pre><code>docker build --platform=linux/amd64 -t your-dockerhub-username/your-app:v1.0.0 .\ndocker push your-dockerhub-username/your-app:v1.0.0\n</code></pre></p> </li> <li> <p>Google Artifact Registry (GCP): <pre><code># Authenticate\ngcloud auth configure-docker us-central1-docker.pkg.dev\n# Build and push\ndocker build --platform=linux/amd64 -t us-central1-docker.pkg.dev/your-gcp-project/your-repo/your-app:v1.0.0 .\ndocker push us-central1-docker.pkg.dev/your-gcp-project/your-repo/your-app:v1.0.0\n</code></pre></p> </li> <li> <p>Amazon Elastic Container Registry (AWS ECR): <pre><code># Authenticate\naws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 123456789012.dkr.ecr.us-east-1.amazonaws.com\n# Build and push\ndocker build --platform=linux/amd64 -t 123456789012.dkr.ecr.us-east-1.amazonaws.com/your-app:v1.0.0 .\ndocker push 123456789012.dkr.ecr.us-east-1.amazonaws.com/your-app:v1.0.0\n</code></pre></p> </li> <li> <p>Azure Container Registry (ACR): <pre><code># Authenticate\naz acr login --name youracrname\n# Build and push\ndocker build --platform=linux/amd64 -t youracrname.azurecr.io/your-app:v1.0.0 .\ndocker push youracrname.azurecr.io/your-app:v1.0.0\n</code></pre></p> </li> <li> <p>Fetch the latest Nexlayer schema to ensure compliance:</p> </li> </ol> <pre><code>curl -X GET \"https://app.nexlayer.io/schema\"\n</code></pre> <ol> <li> <p>Create or update your <code>nexlayer.yaml</code> using the schema and advanced patterns (see above for secure, multi-service examples).</p> </li> <li> <p>Deploy using the API (no auth required for first deployment):</p> </li> </ol> <pre><code>curl -X POST https://api.nexlayer.io/startUserDeployment \\\n  -H \"Content-Type: text/x-yaml\" \\\n  --data-binary @nexlayer.yaml\n</code></pre> <p>No API key or authentication required for your first deployment! Nexlayer is ungated\u2014just upload your YAML and go live instantly.</p> <ol> <li>\ud83c\udf89 Done! You'll get a live URL instantly. Monitor, iterate, and scale as needed.</li> </ol>"},{"location":"deployment/advanced/#support-community","title":"\ud83e\uddd1\u200d\ud83d\udcbb Support &amp; Community","text":"<p>If you need assistance with the Nexlayer API or platform:</p> <ul> <li>Documentation: https://docs.nexlayer.com</li> <li>Email Support: support@nexlayer.com</li> <li>Security Issues: security@nexlayer.com</li> <li>Feedback &amp; Issues: GitHub Issues</li> </ul> <p>\u00a9 2025 AuditDeploy Inc. All rights reserved. Nexlayer is a registered trademark of AuditDeploy Inc.</p>"},{"location":"deployment/advanced/#using-your-own-images","title":"\ud83c\udfd7\ufe0f Using Your Own Images","text":"<p>Nexlayer requires your Docker images to be hosted on a registry (Docker Hub, GHCR.io, or any major cloud provider). </p> <p>Public Images Use your image name directly: <pre><code>image: \"your-username/my-app:v1\"\n</code></pre> If you omit the tag, it defaults to <code>:latest</code>. Always use your own image, not a generic one like <code>nginx:latest</code> for production.</p> <p>Private Images For private images, add a <code>registryLogin</code> block: <pre><code>application:\n  registryLogin:\n    registry: \"ghcr.io\"\n    username: \"your-username\"\n    personalAccessToken: \"your-token\"\n  pods:\n    - name: app\n      image: \"&lt;% REGISTRY %&gt;/your-username/my-app:v1\"\n      servicePorts:\n        - 3000\n</code></pre></p>"},{"location":"deployment/advanced/#adding-ai-models-self-hosted-or-api","title":"\ud83e\udd16 Adding AI Models (Self-Hosted or API)","text":"<p>Nexlayer supports both self-hosted AI models (running as pods) and API-only models (like OpenAI). This flexibility is critical for advanced ML/AI workloads and hybrid architectures.</p> <p>Self-Hosted AI Models Run as pods in your cluster (e.g., Ollama, Hugging Face Transformers): <pre><code>pods:\n  - name: ollama\n    image: \"ollama/ollama:latest\"\n    servicePorts:\n      - 11434\n    volumes:\n      - name: ollama-data\n        size: \"5Gi\"\n        mountPath: \"/root/.ollama\"\n</code></pre> Connect to it using <code>&lt;pod-name&gt;.pod</code> (e.g., <code>ollama.pod:11434</code>).</p> <p>API-Only AI Models For external services (e.g., OpenAI), add the API key to your app's pod: <pre><code>pods:\n  - name: backend\n    image: \"your-username/backend:v1\"\n    servicePorts:\n      - 5000\n    vars:\n      OPENAI_API_KEY: \"&lt;% SECRET_OPENAI_API_KEY %&gt;\"\n    secrets:\n      - name: openai-key\n        data: \"your-openai-key-here\"\n        mountPath: \"/var/secrets\"\n        fileName: \"openai-key.txt\"\n</code></pre></p> <p>Quick Guide: Self-Hosted vs. API-Only - Self-Hosted (Add as Pods): Ollama, Hugging Face Transformers, PyTorch, TensorFlow - API-Only (Use Keys): OpenAI, Claude, Perplexity AI</p>"},{"location":"deployment/advanced/#quick-tips-to-avoid-oops-moments","title":"\u26a1 Quick Tips to Avoid OOPS Moments","text":"<ul> <li>Always start with <code>application:</code>\u2014it's the root of your YAML.</li> <li>Don't reuse pod names\u2014each must be unique.</li> <li>Pod names are lowercase\u2014use letters, numbers, hyphens, or dots only.</li> <li>Set <code>servicePorts</code>\u2014every pod needs at least one port.</li> <li>Use <code>&lt;pod-name&gt;.pod</code> to connect pods.</li> </ul> <p>If something goes wrong: - Image won't load? Check your image name and tag. - Pods can't connect? Make sure your <code>&lt;pod-name&gt;.pod</code> matches the pod's name. - Postgres crashing? Check <code>PGDATA</code> and <code>mountPath</code> (see Saving Data section).</p>"},{"location":"deployment/advanced/#nexlayer-gotchas-potential-oops-moments","title":"\ud83d\udea9 Nexlayer Gotchas &amp; Potential Oops Moments","text":""},{"location":"deployment/advanced/#1-yaml-configuration-pitfalls","title":"1. YAML Configuration Pitfalls","text":"<ul> <li>Missing <code>application:</code> Block</li> <li>Issue: Forgetting to start the YAML with <code>application:</code>.</li> <li>Impact: Deployment fails immediately.</li> <li>Fix: Always include the root <code>application:</code> block.   <pre><code>application:\n  name: \"my-app\"\n  # rest of config\n</code></pre></li> <li>Duplicate Pod Names</li> <li>Issue: Reusing the same name for multiple pods.</li> <li>Impact: Conflicts prevent deployment.</li> <li>Fix: Ensure every pod has a unique name.</li> <li>Invalid Pod Name Format</li> <li>Issue: Pod names must start with a lowercase letter and use only alphanumeric characters, hyphens, or dots.</li> <li>Impact: Invalid names cause deployment errors.</li> <li>Fix: Use valid names like <code>web-app</code>, not <code>WebApp</code>.</li> <li>Forgetting <code>servicePorts</code></li> <li>Issue: Not defining <code>servicePorts</code> for a pod.</li> <li>Impact: Pod can't communicate internally or externally.</li> <li>Fix: Specify at least one port.   <pre><code>servicePorts:\n  - 80\n</code></pre></li> <li>No <code>path</code> for Web-Facing Pods</li> <li>Issue: Omitting <code>path</code> for pods serving web content.</li> <li>Impact: Users can't access the service via a URL.</li> <li>Fix: Define the route explicitly.   <pre><code>path: \"/\"\n</code></pre></li> <li>Wrong <code>&lt;pod-name&gt;.pod</code> Syntax</li> <li>Issue: Misreferencing pods in <code>vars</code> (e.g., wrong name or missing <code>.pod</code>).</li> <li>Impact: Pods can't connect to each other.</li> <li>Fix: Use the correct syntax with the pod name and port.   <pre><code>vars:\n  API_URL: \"http://backend.pod:8000\"\n</code></pre></li> </ul>"},{"location":"deployment/advanced/#2-deployment-image-issues","title":"2. Deployment &amp; Image Issues","text":"<ul> <li>Using Local Docker Images</li> <li>Issue: Referencing a local Docker image instead of a hosted one.</li> <li>Impact: Nexlayer only supports registry-hosted images.</li> <li>Fix: Push images to a registry (e.g., Docker Hub).</li> <li>Private Image Credential Errors</li> <li>Issue: Incorrect <code>registryLogin</code> username or token.</li> <li>Impact: <code>ImagePullBackOff</code> errors during deployment.</li> <li>Fix: Verify credentials match the registry.</li> <li>Missing Image Tags</li> <li>Issue: Not specifying a tag (e.g., <code>my-app</code> instead of <code>my-app:v1</code>).</li> <li>Impact: Defaults to <code>:latest</code>, risking unintended versions.</li> <li>Fix: Always tag images explicitly.   <pre><code>image: \"my-username/my-app:v1.0.0\"\n</code></pre></li> </ul>"},{"location":"deployment/advanced/#3-security-secrets","title":"3. Security &amp; Secrets","text":"<ul> <li>Hardcoding Secrets in YAML</li> <li>Issue: Putting API keys or passwords directly in <code>vars</code>.</li> <li>Impact: Sensitive data is exposed in plain text.</li> <li>Fix: Use the <code>secrets</code> section instead.   <pre><code>secrets:\n  - name: api-key\n    data: \"my-secret-key\"\n    mountPath: \"/var/secrets\"\n    fileName: \"key.txt\"\n</code></pre></li> <li>Misconfigured Secret Paths</li> <li>Issue: Wrong <code>mountPath</code> or <code>fileName</code> for secrets.</li> <li>Impact: App can't access the secret.</li> <li>Fix: Match the app's expected file path.   <pre><code># Example: Reading in Python\nwith open('/var/secrets/key.txt', 'r') as f:\n    api_key = f.read().strip()\n</code></pre></li> <li>Not Referencing Secrets in <code>vars</code></li> <li>Issue: Forgetting to use <code>&lt;% SECRET_NAME %&gt;</code> in environment variables.</li> <li>Impact: Secrets aren't passed to the app.</li> <li>Fix: Use the correct placeholder syntax.   <pre><code>vars:\n  OPENAI_API_KEY: \"&lt;% SECRET_OPENAI_API_KEY %&gt;\"\n</code></pre></li> </ul>"},{"location":"deployment/advanced/#4-data-storage-volumes","title":"4. Data Storage &amp; Volumes","text":"<ul> <li>Postgres <code>mountPath</code> and <code>PGDATA</code> Misconfiguration</li> <li>Issue: Incorrect <code>mountPath</code> or missing <code>PGDATA</code> for Postgres.</li> <li>Impact: Postgres fails to start or loses data on restart.</li> <li>Fix: Mount one level above and set <code>PGDATA</code> explicitly.   <pre><code>volumes:\n  - name: db-data\n    size: \"1Gi\"\n    mountPath: \"/var/lib/postgresql\"\nvars:\n  PGDATA: \"/var/lib/postgresql/data\"\n</code></pre></li> <li>No Volumes for Persistent Data</li> <li>Issue: Not adding volumes for data-storing pods (e.g., databases).</li> <li>Impact: Data vanishes on pod restart.</li> <li>Fix: Always configure volumes for persistence.   <pre><code>volumes:\n  - name: data\n    size: \"1Gi\"\n    mountPath: \"/data\"\n</code></pre></li> <li>Wrong <code>mountPath</code> for Volumes</li> <li>Issue: <code>mountPath</code> doesn't match the app's data directory.</li> <li>Impact: App can't read/write data.</li> <li>Fix: Confirm the app's expected path.</li> </ul>"},{"location":"deployment/advanced/#5-ai-model-integration","title":"5. AI Model Integration","text":"<ul> <li>Treating API-Only Models as Pods</li> <li>Issue: Deploying external APIs (e.g., OpenAI) as pods.</li> <li>Impact: Adds complexity and fails to connect.</li> <li>Fix: Use <code>vars</code> and <code>secrets</code> for API keys instead.   <pre><code>vars:\n  OPENAI_API_KEY: \"&lt;% SECRET_OPENAI_API_KEY %&gt;\"\nsecrets:\n  - name: openai-key\n    data: \"your-key-here\"\n    mountPath: \"/var/secrets\"\n    fileName: \"openai-key.txt\"\n</code></pre></li> <li>No Volumes for Self-Hosted Models</li> <li>Issue: Missing volumes for self-hosted AI models (e.g., model weights).</li> <li>Impact: Data loss or model loading failures.</li> <li>Fix: Add a volume for storage.   <pre><code>volumes:\n  - name: model-data\n    size: \"5Gi\"\n    mountPath: \"/models\"\n</code></pre></li> <li>Wrong Port for Self-Hosted Models</li> <li>Issue: Incorrect <code>servicePorts</code> for self-hosted models.</li> <li>Impact: Other pods can't connect.</li> <li>Fix: Match the model's required port (e.g., 11434 for Ollama).   <pre><code>servicePorts:\n  - 11434\n</code></pre></li> </ul>"},{"location":"deployment/advanced/#6-deployment-automation","title":"6. Deployment &amp; Automation","text":"<ul> <li>Wrong API Key in curl Command</li> <li>Issue: Using an incorrect or expired API key for deployment.</li> <li>Impact: Authentication errors halt deployment.</li> <li>Fix: Validate the key in the command.   <pre><code>curl -X POST https://api.nexlayer.io/deploy \\\n  -H \"Authorization: Bearer YOUR_API_KEY\" \\\n  -F \"file=@nexlayer.yaml\"\n</code></pre></li> <li>Missing <code>url</code> for Permanent Deployments</li> <li>Issue: Not specifying <code>url</code> for production apps.</li> <li>Impact: Deployment is temporary (~2-hour expiry).</li> <li>Fix: Add <code>url</code> for permanence.   <pre><code>url: \"www.myapp.com\"\n</code></pre></li> <li>YAML Indentation Mistakes</li> <li>Issue: Incorrect spacing or indentation.</li> <li>Impact: Parsing errors kill the deployment.</li> <li>Fix: Use a YAML linter to catch issues.</li> </ul>"},{"location":"deployment/advanced/#key-takeaways-for-senior-engineers-ctos","title":"\ud83e\udde0 Key Takeaways for Senior Engineers &amp; CTOs","text":"<ul> <li>YAML Accuracy: Validate every field\u2014syntax errors are a top failure cause.</li> <li>Security: Enforce secrets usage; never hardcode sensitive data.</li> <li>Persistence: Always configure volumes for data-driven pods.</li> <li>AI Models: Know the difference between self-hosted and API-only setups.</li> <li>Automation: Test API keys and commands to keep pipelines reliable.</li> </ul> <p>By mastering these, you'll ensure robust, secure, and efficient Nexlayer deployments. Happy coding!</p>"},{"location":"deployment/advanced/#advanced-cicd-integration","title":"\ud83d\ude80 Advanced CI/CD Integration","text":"<p>For advanced users, Nexlayer offers the power, flexibility, and control to integrate with your preferred CI/CD tools. Whether you're automating builds, pushing images, or deploying updates, you can create a pipeline that fits your workflow\u2014perfect for scaling AI-powered apps efficiently.</p> <p>Why Use CI/CD with Nexlayer? - Automate building and pushing Docker images on every code change. - Deploy updates to Nexlayer seamlessly using the CLI or API. - Ensure consistent, reliable deployments with minimal manual effort.</p> <p>Nexlayer integrates with a wide range of CI/CD platforms, so you can choose the one that best suits your team's needs. Here are some popular options:</p> <ul> <li>Jenkins: Widely used open-source CI/CD server.</li> <li>GitHub Actions: CI/CD platform integrated directly with GitHub.</li> <li>GitLab CI/CD: Integrated with GitLab, a web-based Git repository manager.</li> <li>CircleCI: Cloud-based CI/CD service.</li> <li>Bitbucket Pipelines: Integrated with Bitbucket, a cloud version control system.</li> <li>Azure DevOps: Cloud-based CI/CD service from Microsoft.</li> <li>TeamCity: CI/CD server from JetBrains.</li> <li>AWS CodePipeline: Fully managed CI/CD service on AWS.</li> <li>Travis CI: Cloud-based CI service.</li> <li>Dagger: Programmable CI/CD engine that runs pipelines as code.</li> </ul>"},{"location":"deployment/advanced/#advanced-mode-enterprise-grade-deployment","title":"\ud83c\udfe2 Advanced Mode: Enterprise-Grade Deployment","text":"<p>For advanced users, Nexlayer unlocks the ability to deploy complex, production-ready architectures with a single YAML file. Below is an example of an enterprise-grade AI platform that demonstrates Nexlayer's ability to handle any containerized software in a sophisticated setup. This configuration includes microservices, self-hosted AI models, observability, and task queues\u2014all deployed with one command.</p> <p>Example: Enterprise AI Platform This <code>nexlayer.yaml</code> deploys a 12-component architecture, showcasing microservices, databases, AI models, observability, and async task processing:</p> <pre><code>application:\n  name: \"enterprise-ai-platform\"\n  url: \"enterprise.ai.example.com\"  # Permanent production deployment\n  registryLogin:  # Secure access to private images across multiple registries\n    registry: \"ghcr.io\"\n    username: \"enterprise-team\"\n    personalAccessToken: \"&lt;% REGISTRY_TOKEN %&gt;\"\n  pods:\n    # Web-facing frontend with auto-scaling and custom domain routing\n    - name: frontend\n      image: \"&lt;% REGISTRY %&gt;/enterprise-team/react-frontend:v3.2.1\"\n      path: \"/\"\n      servicePorts:\n        - 3000\n      vars:\n        API_URL: \"http://backend.pod:8000\"\n        ANALYTICS_URL: \"http://analytics.pod:9000\"\n        NEXT_PUBLIC_ENV: \"production\"\n      # Advanced: Custom resource allocation for scaling\n      resources:\n        requests:\n          cpu: \"500m\"\n          memory: \"1Gi\"\n        limits:\n          cpu: \"2\"\n          memory: \"4Gi\"\n\n    # API Gateway for routing and load balancing\n    - name: gateway\n      image: \"&lt;% REGISTRY %&gt;/enterprise-team/nginx-gateway:v1.0.0\"\n      path: \"/gateway\"\n      servicePorts:\n        - 8080\n      vars:\n        BACKEND_UPSTREAM: \"backend.pod:8000\"\n        ANALYTICS_UPSTREAM: \"analytics.pod:9000\"\n\n    # Microservices: Core backend with external AI API integration\n    - name: backend\n      image: \"&lt;% REGISTRY %&gt;/enterprise-team/fastapi-backend:v3.2.1\"\n      path: \"/api\"\n      servicePorts:\n        - 8000\n      vars:\n        DB_URL: \"postgresql://user:pass@db.pod:5432/platformdb\"\n        REDIS_URL: \"redis://cache.pod:6379/0\"\n        OPENAI_API_KEY: \"&lt;% SECRET_OPENAI_API_KEY %&gt;\"\n        STRIPE_API_KEY: \"&lt;% SECRET_STRIPE_API_KEY %&gt;\"\n        SENTRY_DSN: \"&lt;% SECRET_SENTRY_DSN %&gt;\"\n      secrets:\n        - name: openai-key\n          data: \"sk-secure-openai-key\"\n          mountPath: \"/var/secrets\"\n          fileName: \"openai-key.txt\"\n        - name: stripe-key\n          data: \"sk_test_stripe-key\"\n          mountPath: \"/var/secrets\"\n          fileName: \"stripe-key.txt\"\n        - name: sentry-dsn\n          data: \"https://sentry.io/dsn\"\n          mountPath: \"/var/secrets\"\n          fileName: \"sentry-dsn.txt\"\n\n    # Microservices: Analytics service for usage tracking\n    - name: analytics\n      image: \"&lt;% REGISTRY %&gt;/enterprise-team/python-analytics:v1.1.0\"\n      servicePorts:\n        - 9000\n      vars:\n        REDIS_URL: \"redis://cache.pod:6379/1\"\n        DB_URL: \"postgresql://user:pass@db.pod:5432/platformdb\"\n\n    # Database: Postgres with optimized data persistence and backups\n    - name: db\n      image: \"postgres:15\"\n      servicePorts:\n        - 5432\n      vars:\n        POSTGRES_USER: \"user\"\n        POSTGRES_PASSWORD: \"pass\"\n        POSTGRES_DB: \"platformdb\"\n        PGDATA: \"/var/lib/postgresql/data\"\n      volumes:\n        - name: db-data\n          size: \"50Gi\"  # Large storage for production data\n          mountPath: \"/var/lib/postgresql\"\n\n    # Cache: Redis cluster for high-speed caching\n    - name: cache\n      image: \"redis:7.0\"\n      servicePorts:\n        - 6379\n      vars:\n        REDIS_REPLICATION_MODE: \"master\"\n      volumes:\n        - name: redis-data\n          size: \"5Gi\"\n          mountPath: \"/data\"\n\n    # Self-Hosted AI Model 1: Ollama for on-cluster inference\n    - name: ollama\n      image: \"ollama/ollama:latest\"\n      servicePorts:\n        - 11434\n      vars:\n        MODEL_CONFIG: \"/models/config.json\"\n      volumes:\n        - name: ollama-data\n          size: \"50Gi\"  # Large storage for AI model weights\n          mountPath: \"/root/.ollama\"\n        - name: ollama-config\n          size: \"1Gi\"\n          mountPath: \"/models\"\n\n    # Self-Hosted AI Model 2: Hugging Face Transformers for text generation\n    - name: transformers\n      image: \"&lt;% REGISTRY %&gt;/enterprise-team/hf-transformers:v1.0.0\"\n      servicePorts:\n        - 8501\n      vars:\n        HF_MODEL_NAME: \"distilbert-base-uncased\"\n        HF_TOKEN: \"&lt;% SECRET_HF_TOKEN %&gt;\"\n      secrets:\n        - name: hf-token\n          data: \"hf_secure_token\"\n          mountPath: \"/var/secrets\"\n          fileName: \"hf-token.txt\"\n      volumes:\n        - name: transformers-data\n          size: \"100Gi\"  # Massive storage for large models\n          mountPath: \"/models\"\n\n    # Observability: Prometheus for monitoring\n    - name: prometheus\n      image: \"prom/prometheus:v2.47.0\"\n      servicePorts:\n        - 9090\n      volumes:\n        - name: prometheus-data\n          size: \"10Gi\"\n          mountPath: \"/prometheus\"\n      vars:\n        PROMETHEUS_CONFIG: \"/etc/prometheus/prometheus.yml\"\n\n    # Observability: Grafana for dashboards\n    - name: grafana\n      image: \"grafana/grafana:10.1.0\"\n      servicePorts:\n        - 3001\n      vars:\n        GF_SERVER_ROOT_URL: \"http://grafana.pod:3001\"\n        PROMETHEUS_URL: \"http://prometheus.pod:9090\"\n      volumes:\n        - name: grafana-data\n          size: \"5Gi\"\n          mountPath: \"/var/lib/grafana\"\n\n    # Queue: RabbitMQ for async task processing\n    - name: rabbitmq\n      image: \"rabbitmq:3.12-management\"\n      servicePorts:\n        - 5672  # AMQP\n        - 15672  # Management UI\n      vars:\n        RABBITMQ_DEFAULT_USER: \"guest\"\n        RABBITMQ_DEFAULT_PASS: \"guest\"\n      volumes:\n        - name: rabbitmq-data\n          size: \"5Gi\"\n          mountPath: \"/var/lib/rabbitmq\"\n\n    # Worker: Celery worker for background tasks\n    - name: celery-worker\n      image: \"&lt;% REGISTRY %&gt;/enterprise-team/celery-worker:v1.0.0\"\n      servicePorts:\n        - 8001\n      vars:\n        BROKER_URL: \"amqp://guest:guest@rabbitmq.pod:5672//\"\n        REDIS_URL: \"redis://cache.pod:6379/2\"\n</code></pre> <p>This example highlights Nexlayer's ability to manage a complex, production-grade deployment with microservices, self-hosted AI models, observability tools, and task queues\u2014all in a single configuration. Customize it to fit your needs and deploy with easex  Note: For GPU/TPU needs (e.g., for accelerating AI model inference with Ollama or Transformers), please contact sales team at sales@nexlayer.com(mailto:sales@nexlayer.com) to discuss tailored solutions.</p>"},{"location":"deployment/readme/","title":"Nexlayer Deployment YAML: A Guide for Builders, AI Agents, and Startups","text":"<p>Hey there! Welcome to Nexlayer\u2014a simple way to launch your AI-powered web app in the cloud without the infrastructure complexity or DevOps hassle. Whether you're a builder crafting your next big idea, an AI agent automating the process, or a startup scaling fast, this guide will help you deploy in minutes. We'll break down the building blocks of our YAML file so you can define your app, deploy it, and focus on creating. Let's get started!</p>"},{"location":"deployment/readme/#what-youll-learn","title":"What You'll Learn","text":"<ul> <li>What is Nexlayer?</li> <li>How to Deploy (Super Quick!)</li> <li>The YAML Building Blocks</li> <li>Connecting Your App Pieces</li> <li>Saving Data (So It Doesn't Disappear)</li> <li>Keeping Secrets Safe (Like API Keys)</li> <li>Using Your Own Images</li> <li>Adding AI Models (Self-Hosted or API)</li> <li>Quick Tips to Avoid OOPS Moments</li> <li>What's Next?</li> <li>\u2705 Official Example Stack: The AI-Powered Web App</li> </ul>"},{"location":"deployment/readme/#what-is-nexlayer","title":"What is Nexlayer?","text":"<p>Nexlayer is an AI-powered cloud designed to make launching apps effortless. You define your app in a simple YAML file, and Nexlayer handles the rest: setting up your app, scaling it for traffic spikes, and keeping it secure. It's built for builders, AI agents, and startups who want to ship fast\u2014whether you're creating a website, an API, or an AI-powered app. No complex server setup, just pure focus on bringing your ideas to life.</p>"},{"location":"deployment/readme/#how-to-deploy-super-quick","title":"How to Deploy (Super Quick!)","text":"<p>You've got two easy ways to get your app live:</p>"},{"location":"deployment/readme/#with-the-nexlayer-cli","title":"With the Nexlayer CLI","text":"<p>https://github.com/Nexlayer/nexlayer-cli</p> <pre><code>cd my-app\nnexlayer deploy \n</code></pre> <p>That's it\u2014your app is live!</p>"},{"location":"deployment/readme/#with-our-api","title":"With Our API","text":"<pre><code>curl -X POST https://api.nexlayer.io/deploy \\\n  -F \"file=@nexlayer.yaml\"\n</code></pre> <p>No API key or authentication required for your first deployment! Nexlayer is ungated\u2014just upload your YAML and go live instantly.</p> <p>Tip: Prefer a visual setup? Use our Deployment Template Builder to create your YAML without writing a single line!</p>"},{"location":"deployment/readme/#the-yaml-building-blocks","title":"The YAML Building Blocks","text":"<p>The YAML file is like a blueprint for your app. It tells Nexlayer what to run and how to set it up.</p>"},{"location":"deployment/readme/#basic-structure","title":"Basic Structure:","text":"<pre><code>application:\n  name: \"my-ai-app\"\n  url: \"www.myapp.com\" # optional\n  pods:\n    - name: web\n      image: \"your-username/my-app:v1\"\n      servicePorts:\n        - 80\n</code></pre>"},{"location":"deployment/readme/#required-fields","title":"Required Fields","text":"<ul> <li><code>name</code>: A unique name for your app</li> <li><code>pods</code>: The list of containers that make up your app</li> </ul> <p>Each pod needs:</p> <ul> <li><code>name</code>: Lowercase, unique identifier</li> <li><code>image</code>: Hosted Docker image</li> <li><code>servicePorts</code>: At least one port</li> </ul>"},{"location":"deployment/readme/#optional-but-helpful","title":"Optional but Helpful","text":"<ul> <li><code>url</code>: For permanent production apps</li> <li><code>path</code>: Route path for the web pod (e.g., \"/\")</li> <li><code>vars</code>: Environment variables</li> <li><code>volumes</code>: Persistent storage</li> <li><code>secrets</code>: For API keys and credentials</li> </ul>"},{"location":"deployment/readme/#connecting-your-app-pieces","title":"Connecting Your App Pieces","text":"<p>Pods communicate using <code>&lt;pod-name&gt;.pod</code>. For example:</p> <pre><code>vars:\n  API_URL: \"http://backend.pod:8000\"\n</code></pre> <p>No need to configure IPs or DNS\u2014Nexlayer handles it.</p>"},{"location":"deployment/readme/#saving-data-so-it-doesnt-disappear","title":"Saving Data (So It Doesn't Disappear)","text":"<p>Use <code>volumes</code> to persist data between restarts.</p> <pre><code>volumes:\n  - name: my-data\n    size: \"1Gi\"\n    mountPath: \"/data\"\n</code></pre>"},{"location":"deployment/readme/#postgres-tip","title":"Postgres Tip","text":"<p>Bad setup:</p> <pre><code>mountPath: \"/var/lib/postgresql/data\"\n# PGDATA missing\n</code></pre> <p>Best setup:</p> <pre><code>mountPath: \"/var/lib/postgresql\"\nvars:\n  PGDATA: \"/var/lib/postgresql/data\"\n</code></pre> <p>This ensures Postgres runs reliably.</p>"},{"location":"deployment/readme/#keeping-secrets-safe-like-api-keys","title":"Keeping Secrets Safe (Like API Keys)","text":"<pre><code>secrets:\n  - name: my-key\n    data: \"my-super-secret-key\"\n    mountPath: \"/var/secrets\"\n    fileName: \"key.txt\"\n</code></pre> <p>Read the secret in your app:</p> <pre><code>with open('/var/secrets/key.txt', 'r') as f:\n    api_key = f.read().strip()\n</code></pre>"},{"location":"deployment/readme/#using-your-own-images","title":"Using Your Own Images","text":""},{"location":"deployment/readme/#pre-reqs-for-public-images","title":"Pre-reqs for Public Images","text":"<p>Before using your own public Docker image with Nexlayer, make sure you:</p> <ol> <li>\u2705 Have Docker Desktop running</li> <li>\u2705 Build for Linux/x86_64 platform:</li> </ol> <pre><code>docker build --platform=linux/amd64 -t your-image-name .\n</code></pre> <ol> <li>\u2705 Push your image to a public registry:</li> </ol>"},{"location":"deployment/readme/#options","title":"Options:","text":"<ul> <li>TTL.sh (temporary, perfect for quick previews)</li> </ul> <pre><code>image: \"ttl.sh/my-app-name:1h\"\n</code></pre> <ul> <li>Docker Hub (public user repository)</li> </ul> <pre><code>image: \"docker-username/my-app:v1\"\n</code></pre> <ul> <li>GitHub Container Registry (GHCR.io)</li> </ul> <pre><code>image: \"ghcr.io/your-username/my-app:v1\"\n</code></pre>"},{"location":"deployment/readme/#public","title":"Public","text":"<pre><code>image: \"your-username/my-app:v1\"\n</code></pre>"},{"location":"deployment/readme/#private","title":"Private","text":"<pre><code>application:\n  registryLogin:\n    registry: \"ghcr.io\"\n    username: \"your-username\"\n    personalAccessToken: \"your-token\"\n</code></pre>"},{"location":"deployment/readme/#adding-ai-models-self-hosted-or-api","title":"Adding AI Models (Self-Hosted or API)","text":""},{"location":"deployment/readme/#self-hosted","title":"Self-Hosted","text":"<pre><code>- name: ollama\n  image: \"ollama/ollama:latest\"\n  servicePorts:\n    - 11434\n  volumes:\n    - name: ollama-data\n      size: \"5Gi\"\n      mountPath: \"/root/.ollama\"\n</code></pre>"},{"location":"deployment/readme/#api-only","title":"API-Only","text":"<pre><code>vars:\n  OPENAI_API_KEY: \"&lt;% SECRET_OPENAI_API_KEY %&gt;\"\nsecrets:\n  - name: openai-key\n    data: \"your-openai-key-here\"\n    mountPath: \"/var/secrets\"\n    fileName: \"key.txt\"\n</code></pre>"},{"location":"deployment/readme/#quick-tips-to-avoid-oops-moments","title":"Quick Tips to Avoid OOPS Moments","text":"<ul> <li>Always start with <code>application:</code></li> <li>Pod names must be unique and lowercase</li> <li>Every pod needs <code>servicePorts</code></li> <li>Use <code>&lt;pod-name&gt;.pod</code> for internal communication</li> <li>Set <code>PGDATA</code> properly for Postgres</li> </ul>"},{"location":"deployment/readme/#example-the-ai-powered-web-app","title":"\u2705 Example: The AI-Powered Web App","text":""},{"location":"deployment/readme/#from-hello-world-to-production-in-4-steps","title":"From Hello World to Production in 4 Steps","text":"<p>Our AI-native cloud platform handles everything automatically, so you can focus on shipping delightful products users love.</p>"},{"location":"deployment/readme/#step-1-deploy-your-frontend","title":"Step 1 \u2014 Deploy Your Frontend","text":"<p>Tech: Next.js 15 + Tailwind + App Router Start with a modern frontend. Deploy your static or server-rendered Next.js site in seconds.</p> <pre><code>application:\n  name: \"nexlayer-app\" # Required: Globally unique app name\n  pods:\n    - name: prisma  # \ud83d\udd04 Prisma ORM \u2014 type-safe database access layer\n      image: \"user-name/prisma:latest\" # Public image \u2014 Nexlayer pulls this from Docker Hub\n      vars:\n        DATABASE_URL: \"postgresql://postgres:password@database.pod:5432/mydb\"\n</code></pre>"},{"location":"deployment/readme/#step-2-add-auth-database","title":"Step 2 \u2014 Add Auth + Database","text":"<p>Tech: Supabase (Auth + PostgreSQL) Add real users and persistent data using Supabase. Easily store accounts, profiles, and content.</p> <pre><code>pods:\n  - name: db\n    image: \"postgres:14\"\n    servicePorts:\n      - 5432\n    vars:\n      POSTGRES_USER: user\n      POSTGRES_PASSWORD: pass\n      POSTGRES_DB: appdb\n</code></pre>"},{"location":"deployment/readme/#step-3-use-prisma-for-data-logic","title":"Step 3 \u2014 Use Prisma for Data Logic","text":"<p>Tech: Prisma ORM Auto-generate your API with Prisma and define your database schema using elegant TypeScript models.</p> <pre><code>pods:\n  - name: api\n    image: \"ttl.sh/my-backend:1h\"\n    path: /api\n    servicePorts:\n      - 4000\n    vars:\n      DATABASE_URL: \"postgresql://user:pass@db.pod:5432/appdb\"\n</code></pre>"},{"location":"deployment/readme/#step-4-plug-in-openai","title":"Step 4 \u2014 Plug in OpenAI","text":"<p>Tech: OpenAI API Let your users ask questions, summarize notes, or chat with their data \u2014 right inside your app.</p> <pre><code>pods:\n  - name: openai\n    # \ud83e\udd16 OpenAI API wrapper (proxy or backend integration)\n    image: \"user-name/openai:latest\"\n    servicePorts:\n      - 3000\n    vars:\n      OPENAI_API_KEY_PATH: \"/var/secrets/openai/key.txt\"\n    secrets:\n      - name: openai-key\n        data: \"sk-......\"\n        mountPath: \"/var/secrets/openai\"\n        fileName: key.txt\n</code></pre>"},{"location":"deployment/readme/#complete-yaml-everything-together-with-comments","title":"Complete YAML: Everything Together (with Comments)","text":"<p>Here's the full <code>nexlayer.yaml</code> with inline comments to explain what's happening:</p> <pre><code>application:\n  name: \"my-ai-app\"  # \ud83d\udd16 Unique name for your app deployment\n\n  pods:\n    - name: web  # \ud83c\udf10 Frontend pod (e.g., Next.js app)\n      image: \"user-name/web:v1\"\n      path: /  # Serves traffic at root URL\n      servicePorts:\n        - 3000\n      vars:\n        API_URL: \"http://api.pod:4000\"  # Connects to the backend pod\n\n    - name: db  # \ud83d\udee2\ufe0f PostgreSQL database\n      image: \"postgres:14\"\n      servicePorts:\n        - 5432\n      vars:\n        POSTGRES_USER: user\n        POSTGRES_PASSWORD: pass\n        POSTGRES_DB: appdb\n        PGDATA: \"/var/lib/postgresql/data\"  # Tells Postgres where to store data\n      volumes:\n        - name: db-data\n          size: \"1Gi\"\n          mountPath: \"/var/lib/postgresql\"  # One level above PGDATA to avoid init errors\n\n    - name: prisma  # \ud83e\udde9 Prisma ORM layer for DB access\n      image: \"user-name/prisma:latest\"\n      vars:\n        DATABASE_URL: \"postgresql://user:pass@db.pod:5432/appdb\"  # Connects to database pod\n\n    - name: api  # \u2699\ufe0f Custom backend API (e.g., REST or GraphQL)\n      image: \"ttl.sh/my-backend:1h\"  # Temporary public image from ttl.sh\n      path: /api\n      servicePorts:\n        - 4000\n      vars:\n        DATABASE_URL: \"postgresql://user:pass@db.pod:5432/appdb\"\n\n    - name: openai  # \ud83e\udd16 AI service integration (e.g., OpenAI)\n      image: \"user-name/openai:latest\"\n      servicePorts:\n        - 3001\n      vars:\n        OPENAI_API_KEY_PATH: \"/var/secrets/openai/key.txt\"  # Env var pointing to mounted secret\n      secrets:\n        - name: openai-key\n          data: \"sk-...\"  # Your real OpenAI API key goes here\n          mountPath: \"/var/secrets/openai\"\n          fileName: \"key.txt\"  # File name used inside the container\n</code></pre> <p>Prebuilt: Next.js frontend, Supabase auth, PostgreSQL DB, Prisma backend, and OpenAI agent \u2014 all live in minutes.</p>"},{"location":"deployment/readme/#scenario-from-local-game-dev-to-global-launch","title":"\ud83d\ude80 Scenario: From Local Game Dev to Global Launch","text":"<p>Let's say you've just built a sick frontend using Next.js, Tailwind, shadcn/ui, and Framer Motion. Or maybe you whipped up an HTML5 browser game with just JS and CSS, and it runs beautifully in the browser.</p> <p>You got it working locally thanks to your favorite tools like Cursor or Windsurf.</p> <p>It's time to level up \u2014 not just share screen recordings on social, but make it a real product people can use and share anywhere in the world.</p> <p>Here's how to go live fast with Nexlayer:</p>"},{"location":"deployment/readme/#lets-deploy-to-nexlayer","title":"\ud83c\udf0d Let's Deploy to Nexlayer","text":"<ol> <li> <p>Make sure Docker Desktop is running    This lets you build your container image.</p> </li> <li> <p>Create a <code>Dockerfile</code> for your frontend or game:</p> </li> <li> <p>Build and push your image to a public registry (like TTL.sh)</p> </li> <li> <p>Get Nexlayer\u2019s schema to help create your YAML:</p> <pre><code>curl -X GET \"https://app.nexlayer.io/schema\"\n</code></pre> </li> <li> <p>Create a file called <code>nexlayer.yaml</code>, and paste the structure returned from the schema. Then update your image name:</p> <pre><code>application:\n  name: \"my-game\"\n  pods:\n    - name: web\n      image: \"ttl.sh/my-awesome-game:1h\"\n      servicePorts:\n        - 3000\n</code></pre> </li> <li> <p>Deploy it using curl:</p> <pre><code>curl -X POST \"https://app.nexlayer.io/startUserDeployment\" \\\n  -H \"Content-Type: text/x-yaml\" \\\n  --data-binary @nexlayer.yaml\n</code></pre> </li> <li> <p>\ud83c\udf89 Done! You\u2019ll get a live URL instantly.</p> </li> </ol> <p>Conclusion</p> <p>You\u2019ve just gone from a local app or AI idea to a global launch-ready product in minutes. Whether you\u2019re a builder experimenting in Cursor, an AI agent automating the flow, or a startup preparing to scale, Nexlayer turns prototypes into products instantly.</p>"},{"location":"deployment/readme/#support","title":"Support","text":"<p>If you need assistance with the Nexlayer API:</p> <ul> <li>Documentation: https://docs.nexlayer.com</li> <li>Email Support: support@nexlayer.com</li> <li>Security Issues: security@nexlayer.com</li> <li>Feedback &amp; Issues: GitHub Issues</li> </ul> <p>\u00a9 2025 AuditDeploy Inc. All rights reserved. Nexlayer is a registered trademark of AuditDeploy Inc.</p>"},{"location":"get-started/faq/","title":"\u2753 Frequently Asked Questions","text":"<p>1. Why doesn't Nexlayer require a login for previews? - Anti\u2011Vendor Lock\u2011In: We believe shipping should be painless\u2014no vendor accounts, no forms, no barriers. Preview deployments spin up in seconds and live for 2 hours without any login. - Intelligent Integration Layer: Nexlayer connects your code to everything it needs\u2014compute, storage, networking, DNS, volumes\u2014so you can focus on building, not onboarding. - Developer Experience: Instant feedback loop with live URLs, perfect for rapid prototyping and team collaboration. - Security First: Each preview gets a unique, isolated environment with automatic cleanup after expiration.</p> <p>2. What makes Nexlayer unique compared to other cloud platforms? Nexlayer is the only cloud platform that gives individual developers and AI agents the flexibility, control, and power to achieve true real\u2011time, production\u2011grade speed, performance, and massive scale\u2014all through a single declarative YAML, CLI, Web UI, or AI\u2011agent workflow.  </p> <p>No other cloud platform puts you in control of enterprise\u2011scale infrastructure\u2014giving you the power, flexibility, and speed of a global container platform, without any of the complexity.</p> <p>3. I use Vercel/Netlify\u2014why switch to Nexlayer? - Full\u2011Stack in One: Frontend, backend, databases, caches, vector\u2011DBs, and AI integrations\u2014all in a single config. - Instant Previews &amp; Permanent URLs: 2 hr preview, then flip <code>url:</code> for a live, HTTPS\u2011enabled domain. - Built for Scale: Automatic service discovery, resource allocation, and autoscaling\u2014no manual configs. - Advanced Features: Built\u2011in support for WebSockets, long\u2011running processes, and stateful applications. - Cost Effective: Pay only for what you use with automatic resource optimization.</p> <p>4. Do you host GPU workloads or custom model weights? \u26a0\ufe0f Running AI Models on Nexlayer Nexlayer integrates with AI services\u2014it does not host or serve custom model weights or GPUs. For inference use: - External APIs: OpenAI, Claude, Together.ai - Hosted Inference: Hugging Face Inference, Modal, FireworksAI  </p> <p>Need dedicated GPU infrastructure? Ask about our Enterprise Plan.</p> <p>5. How do I migrate from Docker\u2011Compose or Terraform? 1. Convert each service to a <code>pod:</code> block in your <code>nexlayer.yaml</code>. 2. Remove manual <code>resources:</code>\u2014Nexlayer handles CPU, memory, and storage automatically. 3. Replace hostnames with <code>&lt;pod-name&gt;.pod</code>. 4. Deploy via <code>nexlayer deploy</code> or <code>curl</code>; see your preview in seconds. - Migration Tools: Our CLI can auto-convert basic Docker\u2011Compose setups.</p> <p>6. How do I extend or claim a preview? Use your <code>sessionToken</code> from the deploy response: <pre><code># Extend another 2 hrs\ncurl -X POST https://app.nexlayer.io/extendDeployment \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"sessionToken\":\"&lt;token&gt;\",\"applicationName\":\"my-app\"}'\n\n# Claim as permanent\ncurl -X POST https://app.nexlayer.io/claimDeployment \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"sessionToken\":\"&lt;token&gt;\",\"applicationName\":\"my-app\"}'\n</code></pre></p> <p>7. What about CI/CD and AI agent integrations? - GitHub Actions: One curl step on push triggers your deployment. - AI Agents: Automate via Cursor, Copilot, Claude, Warp, or ChatGPT prompts. - CLI Hooks: Embed nexlayer deploy in any pipeline (GitLab, CircleCI, Jenkins). - Advanced Features: Rollback, approvals, and environment promotions built\u2011in.</p> <p>8. How does pricing compare? - Free Preview: 2 hr live URL, no login or card needed. - Scale Plan: $49/month/app + usage\u2011based NXC credits\u2014comparable to a small VM + managed DB. - Enterprise: Custom SLAs, dedicated API endpoints, on\u2011prem proxies, and volume pricing for large fleets.</p> <p>9. Which frameworks and services can I use? - Frontend: Next.js, Remix, React, Angular, Vue, Svelte - Backend: Express, Node.js, Django, FastAPI, Flask - Databases: PostgreSQL, MySQL, MongoDB, Neon, SQLite - Caches: Redis, Memcached, Valkey, Dragonfly, KeyDB - Vector DBs: Pinecone, Qdrant, Milvus, Chroma, Weaviate - AI &amp; LLMs: OpenAI API, Claude API, Hugging Face Inference API, LangChain, Vertex AI, Ollama, Modal, FireworksAI</p> <p>10. Need help or want to learn more? - Docs: docs.nexlayer.io - CLI Repo: github.com/Nexlayer/nexlayer-cli - Community: Discord &amp; Slack for builders and agent\u2011developers - Support: support@nexlayer.io or open a GitHub issue</p>"},{"location":"get-started/introduction/","title":"\ud83d\ude80 Welcome to Nexlayer","text":"<p>The fastest way to launch real apps \u2014 built by you or your AI.</p> <p>Nexlayer is the AI-native cloud for builders, creators, startups, and agents. Whether you\u2019re coding in Cursor, generating with ChatGPT, or running your own AI workflow \u2014 Nexlayer takes your idea and brings it to life with a live, scalable URL.</p> <p>No DevOps. No setup. No code required to start.</p>"},{"location":"get-started/introduction/#why-nexlayer","title":"\ud83d\udca1 Why Nexlayer?","text":"<p>Because the hard parts of cloud infrastructure shouldn't slow you down.</p> <p>Nexlayer automates everything behind the scenes:</p> <ul> <li>\ud83d\udee0\ufe0f Builds your containers from code or prompts  </li> <li>\ud83d\udd10 Secures your app with TLS, secrets, and env vars  </li> <li>\ud83c\udf10 Connects all your services with zero config  </li> <li>\ud83d\ude80 Scales instantly as traffic grows  </li> <li>\ud83d\udd0e Discovers services like magic (<code>&lt;pod-name&gt;.pod</code>)  </li> <li>\u26a1 Deploys from CLI, Web UI, API, or AI agents</li> </ul> <p>You bring the idea \u2014 Nexlayer handles the cloud.</p>"},{"location":"get-started/introduction/#what-can-i-deploy","title":"\ud83e\uddea What can I deploy?","text":"<p>Anything from:</p> <ul> <li>A simple \u201cHello World\u201d web page  </li> <li>A fullstack app with frontend, backend, and database  </li> <li>An AI-powered app with vector DBs and OpenAI APIs  </li> <li>A product MVP built entirely in an AI code editor  </li> <li>Your AI agent's next-generation toolchain</li> </ul> <p>Nexlayer is production-grade, AI-friendly, and designed for helping you go from mvp to scalable product in minutes. Saving you time, complexity and money.</p>"},{"location":"get-started/introduction/#you-dont-need-to-understand-yaml-but-its-there-when-youre-ready","title":"\ud83e\uddf0 You don\u2019t need to understand YAML \u2014 but it\u2019s there when you\u2019re ready","text":"<p>Most users never even touch <code>nexlayer.yaml</code>. But if you want to take control \u2014 define your app structure, scale out pods, and wire up multi-service backends \u2014 it\u2019s just a single file.</p> <p>One config. Full stack. Live URL.</p>"},{"location":"get-started/introduction/#whats-next","title":"\u2728 What\u2019s Next?","text":"<ul> <li>Quickstart: Deploy with No Code </li> <li>Explore Examples </li> <li>Understand the YAML (Optional) </li> </ul> <p>Nexlayer is where code meets cloud \u2014 with no friction. Let\u2019s launch something incredible.</p>"},{"location":"guides/agent-integration/","title":"Agent Integration","text":""},{"location":"guides/agent-integration/#nexlayer-agent-api-flow","title":"\ud83d\udd01 Nexlayer Agent API Flow","text":"<pre><code>1. GET /schema               \u2192 build a valid YAML\n2. POST /validate            \u2192 check if it\u2019s valid (optional)\n3. POST /startUserDeployment \u2192 deploy and return a live URL\n</code></pre>"},{"location":"guides/agent-integration/#full-ai-deployment-prompt","title":"\ud83e\udde0 Full AI Deployment Prompt","text":"<p>\u201cCreate a Dockerfile for my project. Then build the image and push it to Docker Hub, GHCR, or any registry. After that, call <code>GET https://app.nexlayer.io/schema</code> to generate a <code>nexlayer.yaml</code>. Update the <code>nexlayer.yaml</code> with the image you just pushed, and deploy it by calling <code>POST https://app.nexlayer.io/startUserDeployment</code>. Show me the live URL.\u201d</p> <p>This prompt works across all environments and tools \u2014 whether you're using Claude, Cursor, ChatGPT, or a custom agent.</p>"},{"location":"guides/agent-integration/#what-the-agent-should-do","title":"\ud83e\udde9 What the Agent Should Do","text":"<ol> <li>\ud83d\udd28 Create a Dockerfile based on the user's project</li> <li>\ud83d\udc33 Build and tag the image locally</li> <li>\u2601\ufe0f Push the image to a container registry (Docker Hub, GHCR, etc.)</li> <li>\ud83d\udcc4 Fetch Nexlayer schema from <code>GET /schema</code></li> <li>\ud83e\udde9 Generate and update <code>nexlayer.yaml</code> using the image you just pushed</li> <li>\ud83d\ude80 Deploy via <code>POST /startUserDeployment</code></li> <li>\ud83d\udd17 Print the live app URL from the response</li> </ol>"},{"location":"guides/agent-integration/#image-hosting-reminder","title":"\ud83d\udc33 Image Hosting Reminder","text":"<p>Every image listed in your <code>nexlayer.yaml</code> must be hosted on a registry. Nexlayer cannot use local images.</p> <p>\u2705 Valid examples:</p> <pre><code>image: \"your-username/my-app:latest\"\nimage: \"ghcr.io/your-org/ai-backend:v1.2.0\"\n</code></pre> <p>\u274c Invalid examples:</p> <pre><code>image: \"./Dockerfile\"\nimage: \"local-image\"\n</code></pre> <p>If the image hasn\u2019t been pushed to a public or private registry, the deployment will fail.</p>"},{"location":"guides/agent-integration/#api-endpoints-summary","title":"\ud83d\udd17 API Endpoints Summary","text":"Action Endpoint Description Generate <code>GET https://app.nexlayer.io/schema</code> Get full YAML schema Validate <code>POST https://app.nexlayer.io/validate</code> Check if your YAML is valid Deploy <code>POST https://app.nexlayer.io/startUserDeployment</code> Launch your app live <p>Nexlayer was built for agents. You describe the app. Your agent ships it.</p>"},{"location":"guides/ci/","title":"CI","text":""},{"location":"guides/ci/#continuous-integration-with-nexlayer","title":"\ud83d\udd04 Continuous Integration with Nexlayer","text":"<p>You can deploy to Nexlayer from any CI pipeline using a simple <code>curl</code> call. There\u2019s no special format required\u2014just build your image, push it to a registry, and post your <code>nexlayer.yaml</code> to the deployment endpoint.</p> <p>\ud83d\udca1 Any technology that can be containerized can be deployed on Nexlayer \u2014 from Node.js, Python, and Go, to ML workloads, microservices, or internal tools.</p>"},{"location":"guides/ci/#basic-ci-flow","title":"\u2705 Basic CI Flow","text":"<pre><code>curl -X POST https://app.nexlayer.io/startUserDeployment \\\n  -H \"Content-Type: text/x-yaml\" \\\n  --data-binary @nexlayer.yaml\n</code></pre> <p>If successful, the response will include a live URL:</p> <pre><code>{\n  \"url\": \"https://yourapp-name.nexlayer.app\"\n}\n</code></pre>"},{"location":"guides/ci/#what-your-ci-should-do","title":"\ud83e\udde0 What Your CI Should Do","text":"<ol> <li>\ud83d\udc33 Build your Docker image</li> <li>\u2601\ufe0f Push it to a public or private registry (recommended: GitHub Container Registry)</li> <li>\ud83d\udcc4 Update your <code>nexlayer.yaml</code> with the image reference (e.g., <code>ghcr.io/your-org/your-app:tag</code>)</li> <li>\ud83d\ude80 Deploy using <code>POST /startUserDeployment</code></li> </ol> <p>\ud83d\udcdd Note on databases: You can connect to external managed databases (like MongoDB Atlas, Supabase, or Neon). While it works, we recommend deploying your own DB pod on Nexlayer for tighter control, lower latency, and environment isolation.</p>"},{"location":"guides/ci/#github-actions-example-with-ghcr","title":"\ud83d\udee0 GitHub Actions Example (with GHCR)","text":"<pre><code>name: Nexlayer CI/CD\n\non:\n  push:\n    branches: [main]\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n      packages: write\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Log in to GitHub Container Registry\n        run: echo \"${{ secrets.GITHUB_TOKEN }}\" | docker login ghcr.io -u ${{ github.actor }} --password-stdin\n\n      - name: Build and push Docker image\n        run: |\n          docker build -t ghcr.io/${{ github.repository }}:latest .\n          docker push ghcr.io/${{ github.repository }}:latest\n\n      - name: Patch nexlayer.yaml with image\n        run: |\n          sed -i \"s|image:.*|image: ghcr.io/${{ github.repository }}:latest|\" nexlayer.yaml\n\n      - name: Deploy to Nexlayer\n        run: |\n          curl -X POST https://app.nexlayer.io/startUserDeployment \\\n            -H \"Content-Type: text/x-yaml\" \\\n            --data-binary @nexlayer.yaml\n</code></pre> <p>\ud83d\udca1 Tip: GitHub\u2019s native container registry (GHCR) is a secure and reliable choice for CI/CD deployments.</p>"},{"location":"guides/ci/#ci-notifications-optional","title":"\ud83d\udd14 CI Notifications (Optional)","text":"<p>To capture deployment status, capture the response:</p> <pre><code>RESPONSE=$(curl -s -X POST https://app.nexlayer.io/startUserDeployment \\\n  -H \"Content-Type: text/x-yaml\" \\\n  --data-binary @nexlayer.yaml)\n\nURL=$(echo \"$RESPONSE\" | jq -r .url)\necho \"\u2705 Deployed to: $URL\"\n</code></pre> <p>You can then send it to Slack or Discord using a webhook.</p>"},{"location":"guides/ci/#endpoints-summary","title":"\ud83c\udf10 Endpoints Summary","text":"Action Endpoint Deploy <code>POST https://app.nexlayer.io/startUserDeployment</code> (Optional) <code>GET https://app.nexlayer.io/schema</code> \u2013 generate YAML (Optional) <code>POST https://app.nexlayer.io/validate</code> \u2013 validate YAML"},{"location":"guides/ci/#notes-on-image-hosting","title":"\ud83d\udce6 Notes on Image Hosting","text":"<ul> <li>All images must be hosted on a registry (e.g., Docker Hub, GHCR)</li> <li>Local images will not work\u2014Nexlayer must be able to pull the image remotely</li> </ul>"},{"location":"guides/ci/#common-gotchas","title":"\ud83e\uddea Common Gotchas","text":"<ul> <li>\u274c Missing <code>image:</code> tag or incorrect reference in your YAML</li> <li>\u274c Using a local-only Docker image not pushed to a registry</li> <li>\u274c Not updating your <code>nexlayer.yaml</code> with the image tag you just pushed</li> </ul>"},{"location":"guides/ci/#recap-full-flow-in-ci","title":"\u2705 Recap: Full Flow in CI","text":"<ol> <li>Build your Docker image</li> <li>Push it to GHCR or another registry</li> <li>Update your <code>nexlayer.yaml</code></li> <li><code>curl -X POST /startUserDeployment</code></li> <li>Parse and post the returned URL if needed</li> </ol> <p>This CI flow works across all platforms\u2014GitHub Actions, GitLab CI, CircleCI, etc.\u2014because it\u2019s just HTTP. You bring the image, Nexlayer brings the launchpad.</p>"},{"location":"guides/cli/","title":"CLI","text":""},{"location":"guides/cli/#nexlayer-cli","title":"\u26a1 Nexlayer CLI","text":"<p>Nexlayer CLI lets you deploy fullstack and AI-powered apps to the cloud in seconds\u2014no infrastructure setup required.</p>"},{"location":"guides/cli/#quick-start","title":"\ud83d\ude80 Quick Start","text":"<pre><code># Install Nexlayer CLI\ncurl -sSL https://get.nexlayer.io | bash\n\n# Initialize your project\nnexlayer init\n\n# Deploy it\nnexlayer deploy\n</code></pre> <p>Your app will be live on a Nexlayer URL. Simple as that.</p>"},{"location":"guides/cli/#common-commands","title":"\ud83d\udd27 Common Commands","text":"Command Description <code>nexlayer init</code> Set up your existing project <code>nexlayer deploy</code> Launch your app live on Nexlayer <code>nexlayer templates</code> Browse AI and fullstack templates <code>nexlayer install</code> Update the CLI"},{"location":"guides/cli/#full-cli-documentation","title":"\ud83d\udcd8 Full CLI Documentation","text":"<p>For advanced options, command flags, templates, AI deployment guides, and troubleshooting:</p> <p>\ud83d\udc49 View the CLI GitHub Repository</p> <p>You'll find full reference documentation, install scripts, and release notes.</p>"},{"location":"guides/cli/#what-you-can-deploy","title":"\ud83e\udde0 What You Can Deploy","text":"<ul> <li>AI chatbots, RAG, or multi-model apps</li> <li>Web frontends (Next.js, React, etc.)</li> <li>Python / FastAPI / Node.js backends</li> <li>Postgres or vector DBs</li> <li>Anything you can run in a container</li> </ul>"},{"location":"guides/cli/#need-help","title":"Need Help?","text":"<ul> <li>Read the Nexlayer Docs</li> <li>Visit the GitHub CLI Repo</li> <li>Email: support@nexlayer.io</li> </ul>"},{"location":"guides/examples/","title":"Examples Guide","text":"<p>This guide provides real-world examples and use cases for Nexlayer.</p>"},{"location":"guides/examples/#basic-examples","title":"Basic Examples","text":""},{"location":"guides/examples/#project-setup","title":"Project Setup","text":"<pre><code># Initialize a new project\nnexlayer init my-project\n\n# Configure the project\nnexlayer config init\n\n# Create a basic agent\nnexlayer agent create my-agent\n</code></pre>"},{"location":"guides/examples/#simple-task-automation","title":"Simple Task Automation","text":"<pre><code># config.yaml\nagent:\n  name: backup-agent\n  tasks:\n    - name: daily-backup\n      schedule: \"0 0 * * *\"\n      command: |\n        tar -czf backup.tar.gz /data\n        aws s3 cp backup.tar.gz s3://my-backups/\n</code></pre>"},{"location":"guides/examples/#advanced-examples","title":"Advanced Examples","text":""},{"location":"guides/examples/#cicd-pipeline","title":"CI/CD Pipeline","text":"<pre><code># ci.yaml\nversion: \"1.0\"\nci:\n  triggers:\n    - type: push\n      branches: [main]\n  stages:\n    - name: build\n      steps:\n        - name: build\n          command: make build\n    - name: test\n      steps:\n        - name: test\n          command: make test\n    - name: deploy\n      steps:\n        - name: deploy\n          command: make deploy\n</code></pre>"},{"location":"guides/examples/#monitoring-setup","title":"Monitoring Setup","text":"<pre><code># monitoring.yaml\nmonitoring:\n  metrics:\n    - name: cpu\n      interval: 15s\n    - name: memory\n      interval: 15s\n  alerts:\n    - name: high-cpu\n      condition: cpu &gt; 80\n      action: notify\n</code></pre>"},{"location":"guides/examples/#real-world-use-cases","title":"Real-World Use Cases","text":""},{"location":"guides/examples/#1-automated-deployment","title":"1. Automated Deployment","text":"<pre><code># deployment.yaml\ndeployment:\n  stages:\n    - name: validate\n      steps:\n        - name: check-dependencies\n          command: make check-deps\n    - name: build\n      steps:\n        - name: build-app\n          command: make build\n    - name: deploy\n      steps:\n        - name: deploy-staging\n          command: make deploy-staging\n        - name: deploy-prod\n          command: make deploy-prod\n          when: branch == 'main'\n</code></pre>"},{"location":"guides/examples/#2-database-management","title":"2. Database Management","text":"<pre><code># database.yaml\ndatabase:\n  backup:\n    schedule: \"0 0 * * *\"\n    retention: 7d\n    storage:\n      type: s3\n      bucket: db-backups\n  maintenance:\n    schedule: \"0 2 * * 0\"\n    tasks:\n      - name: vacuum\n        command: vacuumdb\n      - name: analyze\n        command: analyze\n</code></pre>"},{"location":"guides/examples/#3-log-management","title":"3. Log Management","text":"<pre><code># logging.yaml\nlogging:\n  rotation:\n    max-size: 100MB\n    max-age: 7d\n  aggregation:\n    type: elasticsearch\n    index: nexlayer-logs\n  alerts:\n    - name: error-rate\n      condition: error.count &gt; 100\n      action: notify\n</code></pre>"},{"location":"guides/examples/#4-security-monitoring","title":"4. Security Monitoring","text":"<pre><code># security.yaml\nsecurity:\n  monitoring:\n    - name: auth-failures\n      threshold: 10\n      window: 5m\n    - name: suspicious-ips\n      threshold: 5\n      window: 1h\n  alerts:\n    - name: auth-alert\n      condition: auth.failures &gt; 10\n      action: block-ip\n</code></pre>"},{"location":"guides/examples/#integration-examples","title":"Integration Examples","text":""},{"location":"guides/examples/#1-github-actions-integration","title":"1. GitHub Actions Integration","text":"<pre><code># .github/workflows/ci.yml\nname: CI\non:\n  push:\n    branches: [main]\n  pull_request:\n    branches: [main]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Run Nexlayer CI\n        uses: nexlayer/action@v1\n        with:\n          config: .nexlayer/ci.yaml\n</code></pre>"},{"location":"guides/examples/#2-slack-integration","title":"2. Slack Integration","text":"<pre><code># notifications.yaml\nnotifications:\n  - type: slack\n    channel: alerts\n    events:\n      - name: deployment\n        template: |\n          Deployment ${status}\n          Project: ${project}\n          Environment: ${env}\n          Duration: ${duration}\n</code></pre>"},{"location":"guides/examples/#3-prometheus-integration","title":"3. Prometheus Integration","text":"<pre><code># metrics.yaml\nmetrics:\n  prometheus:\n    enabled: true\n    port: 9090\n    path: /metrics\n    labels:\n      app: nexlayer\n      env: production\n</code></pre>"},{"location":"guides/examples/#configuration-examples","title":"Configuration Examples","text":""},{"location":"guides/examples/#1-multi-environment-setup","title":"1. Multi-Environment Setup","text":"<pre><code># environments.yaml\nenvironments:\n  development:\n    api_url: http://dev-api.example.com\n    debug: true\n  staging:\n    api_url: http://staging-api.example.com\n    debug: false\n  production:\n    api_url: https://api.example.com\n    debug: false\n</code></pre>"},{"location":"guides/examples/#2-resource-management","title":"2. Resource Management","text":"<pre><code># resources.yaml\nresources:\n  limits:\n    cpu: 2\n    memory: 4Gi\n  requests:\n    cpu: 1\n    memory: 2Gi\n  scaling:\n    min: 2\n    max: 10\n</code></pre>"},{"location":"guides/examples/#3-network-configuration","title":"3. Network Configuration","text":"<pre><code># network.yaml\nnetwork:\n  ingress:\n    - host: api.example.com\n      port: 443\n      tls: true\n  egress:\n    - host: *.example.com\n      port: 443\n      tls: true\n</code></pre>"},{"location":"guides/examples/#best-practices-examples","title":"Best Practices Examples","text":""},{"location":"guides/examples/#1-error-handling","title":"1. Error Handling","text":"<pre><code># error-handling.yaml\nerror-handling:\n  retry:\n    attempts: 3\n    delay: 5s\n    max-delay: 60s\n  fallback:\n    - action: notify\n      channel: alerts\n    - action: rollback\n      steps: [deploy]\n</code></pre>"},{"location":"guides/examples/#2-security-configuration","title":"2. Security Configuration","text":"<pre><code># security-config.yaml\nsecurity:\n  auth:\n    type: jwt\n    expiry: 24h\n  rbac:\n    roles:\n      - name: admin\n        permissions: [all]\n      - name: operator\n        permissions: [read, execute]\n</code></pre>"},{"location":"guides/examples/#3-monitoring-setup","title":"3. Monitoring Setup","text":"<pre><code># monitoring-config.yaml\nmonitoring:\n  metrics:\n    - name: request-rate\n      type: counter\n    - name: response-time\n      type: histogram\n  alerts:\n    - name: high-latency\n      condition: response_time &gt; 1s\n      action: notify\n</code></pre>"},{"location":"guides/examples/#support","title":"Support","text":"<p>For additional help: - Check the FAQ - Review other Guides - Open GitHub issues - Join community discussions </p>"},{"location":"guides/post-deploy/","title":"Post-Deployment Guide","text":"<p>This guide covers post-deployment management, monitoring, and maintenance of your Nexlayer deployment.</p>"},{"location":"guides/post-deploy/#deployment-verification","title":"Deployment Verification","text":""},{"location":"guides/post-deploy/#health-checks","title":"Health Checks","text":"<pre><code># Check deployment health\nnexlayer deploy health\n\n# View deployment status\nnexlayer deploy status\n\n# Check service logs\nnexlayer deploy logs\n</code></pre>"},{"location":"guides/post-deploy/#configuration","title":"Configuration","text":"<pre><code>health:\n  checks:\n    - name: api\n      url: http://localhost:8080/health\n      interval: 30s\n      timeout: 5s\n    - name: database\n      url: http://localhost:5432/health\n      interval: 30s\n      timeout: 5s\n  alerts:\n    - name: service-down\n      condition: health.status == 'unhealthy'\n      action: notify\n</code></pre>"},{"location":"guides/post-deploy/#monitoring","title":"Monitoring","text":""},{"location":"guides/post-deploy/#system-metrics","title":"System Metrics","text":"<pre><code>monitoring:\n  metrics:\n    - name: cpu\n      interval: 15s\n    - name: memory\n      interval: 15s\n    - name: disk\n      interval: 1m\n    - name: network\n      interval: 15s\n  alerts:\n    - name: high-cpu\n      condition: cpu &gt; 80\n      action: notify\n    - name: low-memory\n      condition: memory &lt; 20\n      action: notify\n</code></pre>"},{"location":"guides/post-deploy/#application-metrics","title":"Application Metrics","text":"<pre><code>application:\n  metrics:\n    - name: request-rate\n      type: counter\n    - name: response-time\n      type: histogram\n    - name: error-rate\n      type: gauge\n  logging:\n    level: info\n    format: json\n    output: file\n</code></pre>"},{"location":"guides/post-deploy/#logging","title":"Logging","text":""},{"location":"guides/post-deploy/#configuration_1","title":"Configuration","text":"<pre><code>logging:\n  level: info\n  format: json\n  output:\n    - file\n    - stdout\n  rotation:\n    max-size: 100MB\n    max-age: 7d\n    max-backups: 10\n  fields:\n    - name: service\n      value: nexlayer\n    - name: environment\n      value: production\n</code></pre>"},{"location":"guides/post-deploy/#usage","title":"Usage","text":"<pre><code># View logs\nnexlayer logs\n\n# Filter logs\nnexlayer logs --level error\n\n# Search logs\nnexlayer logs --search \"error\"\n\n# Export logs\nnexlayer logs --export logs.json\n</code></pre>"},{"location":"guides/post-deploy/#backup-and-recovery","title":"Backup and Recovery","text":""},{"location":"guides/post-deploy/#backup-configuration","title":"Backup Configuration","text":"<pre><code>backup:\n  schedule: \"0 0 * * *\"  # Daily at midnight\n  retention: 30d\n  storage:\n    type: s3\n    bucket: nexlayer-backups\n    path: /backups\n  include:\n    - config\n    - data\n    - logs\n</code></pre>"},{"location":"guides/post-deploy/#recovery-procedures","title":"Recovery Procedures","text":"<ol> <li> <p>Configuration Recovery <pre><code># Restore configuration\nnexlayer backup restore --type config\n\n# Verify restoration\nnexlayer config validate\n</code></pre></p> </li> <li> <p>Data Recovery <pre><code># Restore data\nnexlayer backup restore --type data\n\n# Verify data integrity\nnexlayer data verify\n</code></pre></p> </li> </ol>"},{"location":"guides/post-deploy/#scaling","title":"Scaling","text":""},{"location":"guides/post-deploy/#horizontal-scaling","title":"Horizontal Scaling","text":"<pre><code>scaling:\n  horizontal:\n    enabled: true\n    min: 2\n    max: 10\n    metrics:\n      - name: cpu\n        threshold: 80\n      - name: memory\n        threshold: 80\n    cooldown: 300s\n</code></pre>"},{"location":"guides/post-deploy/#vertical-scaling","title":"Vertical Scaling","text":"<pre><code>scaling:\n  vertical:\n    enabled: true\n    resources:\n      cpu:\n        min: 1\n        max: 4\n      memory:\n        min: 1Gi\n        max: 4Gi\n    metrics:\n      - name: cpu\n        threshold: 80\n      - name: memory\n        threshold: 80\n</code></pre>"},{"location":"guides/post-deploy/#security","title":"Security","text":""},{"location":"guides/post-deploy/#access-control","title":"Access Control","text":"<pre><code>security:\n  auth:\n    type: jwt\n    expiry: 24h\n  rbac:\n    roles:\n      - name: admin\n        permissions: [all]\n      - name: operator\n        permissions: [read, execute]\n      - name: viewer\n        permissions: [read]\n</code></pre>"},{"location":"guides/post-deploy/#audit-logging","title":"Audit Logging","text":"<pre><code>audit:\n  enabled: true\n  events:\n    - name: auth\n      level: info\n    - name: config\n      level: info\n    - name: data\n      level: info\n  storage:\n    type: file\n    path: /var/log/audit\n</code></pre>"},{"location":"guides/post-deploy/#maintenance","title":"Maintenance","text":""},{"location":"guides/post-deploy/#scheduled-maintenance","title":"Scheduled Maintenance","text":"<pre><code>maintenance:\n  schedule:\n    - day: sunday\n      time: \"02:00\"\n      duration: 2h\n  tasks:\n    - name: backup\n      command: nexlayer backup run\n    - name: cleanup\n      command: nexlayer cleanup\n    - name: update\n      command: nexlayer update\n</code></pre>"},{"location":"guides/post-deploy/#update-procedures","title":"Update Procedures","text":"<ol> <li> <p>Pre-update <pre><code># Backup current state\nnexlayer backup run\n\n# Verify backup\nnexlayer backup verify\n</code></pre></p> </li> <li> <p>Update <pre><code># Update Nexlayer\nnexlayer update\n\n# Verify update\nnexlayer version\n</code></pre></p> </li> <li> <p>Post-update <pre><code># Verify functionality\nnexlayer health\n\n# Rollback if needed\nnexlayer rollback\n</code></pre></p> </li> </ol>"},{"location":"guides/post-deploy/#troubleshooting","title":"Troubleshooting","text":""},{"location":"guides/post-deploy/#common-issues","title":"Common Issues","text":"<ol> <li>Performance Issues</li> <li>Check resource usage</li> <li>Review logs</li> <li>Analyze metrics</li> <li> <p>Scale resources</p> </li> <li> <p>Service Outages</p> </li> <li>Check health status</li> <li>Review error logs</li> <li>Verify configuration</li> <li> <p>Check dependencies</p> </li> <li> <p>Data Issues</p> </li> <li>Verify data integrity</li> <li>Check backup status</li> <li>Review access logs</li> <li>Validate permissions</li> </ol>"},{"location":"guides/post-deploy/#best-practices","title":"Best Practices","text":"<ol> <li>Monitoring</li> <li>Set up comprehensive monitoring</li> <li>Configure appropriate alerts</li> <li>Regular metric analysis</li> <li> <p>Log aggregation</p> </li> <li> <p>Security</p> </li> <li>Regular security audits</li> <li>Access control review</li> <li>Update management</li> <li> <p>Backup verification</p> </li> <li> <p>Maintenance</p> </li> <li>Scheduled maintenance</li> <li>Regular updates</li> <li>Resource optimization</li> <li> <p>Performance tuning</p> </li> <li> <p>Documentation</p> </li> <li>Keep runbooks updated</li> <li>Document procedures</li> <li>Maintain change logs</li> <li>Update configurations</li> </ol>"},{"location":"guides/post-deploy/#support","title":"Support","text":"<p>For additional help: - Check the FAQ - Review Examples - Open GitHub issues - Join community discussions </p>"},{"location":"guides/quickstart/","title":"\ud83d\udd25 Quick Start: Deploy in 5 Minutes","text":"<p>Let's get your first app running on Nexlayer \u2014 the cloud built for speed, simplicity, and scale.</p>"},{"location":"guides/quickstart/#step-1-create-nexlayeryaml","title":"\ud83d\udcdd Step 1: Create <code>nexlayer.yaml</code>","text":"<p>Start with the simplest deployment possible \u2014 a single web service.</p> <pre><code>application:\n  name: \"hello-nexlayer\"\n  pods:\n    - name: web\n      image: \"your-username/hello-world:v1.0.0\" # Replace with your actual image on Docker Hub or GHCR\n      path: /\n      servicePorts:\n        - 80\n</code></pre> <p>\ud83d\udca1 Tip: Use <code>nexlayer init</code> or ask ChatGPT to generate this file for you from a short description like: \"A simple web app that listens on port 80 and responds with Hello World.\"</p>"},{"location":"guides/quickstart/#step-2-deploy-it","title":"\ud83d\ude80 Step 2: Deploy it","text":"<p>From your terminal:</p> <pre><code>curl -X POST https://app.nexlayer.io/startUserDeployment \\\n  -H \"Content-Type: text/x-yaml\" \\\n  --data-binary @nexlayer.yaml\n</code></pre> <p>Or use the Nexlayer CLI:</p> <pre><code>nexlayer deploy\n</code></pre> <p>Or just say in Cursor:</p> <p>\"Deploy my app to nexlayer.com\"</p>"},{"location":"guides/quickstart/#step-3-youre-live","title":"\ud83c\udf10 Step 3: You're live","text":"<p>You'll get a live URL like:</p> <pre><code>https://hello-nexlayer.web.pod.nexlayer.app\n</code></pre> <p>And your app will auto-scale, restart on failure, and self-heal \u2014 no infra setup required.</p>"},{"location":"guides/quickstart/#scaling-up-add-more-pods-like-lego-blocks","title":"\ud83e\uddf1 Scaling Up: Add More Pods Like Lego Blocks","text":"<p>Nexlayer pods are like Lego pieces \u2014 each one can serve a specific role (frontend, backend, DB, cache, etc.) and they automatically snap together using <code>&lt;pod-name&gt;.pod</code>.</p> <p>Here's how you'd add a backend pod that your frontend can talk to:</p> <pre><code>application:\n  name: \"hello-fullstack\"\n  pods:\n    - name: frontend\n      image: \"your-username/nextjs-frontend:v1.0.0\"\n      path: /\n      servicePorts:\n        - 3000\n      vars:\n        API_URL: \"http://backend.pod:4000\" # &lt;\u2014 automatic service discovery\n\n    - name: backend\n      image: \"your-username/fastapi-backend:v1.0.0\"\n      path: /api\n      servicePorts:\n        - 4000\n</code></pre> <p>\u2705 No IP addresses \u2705 No manual networking \u2705 Just name your pods and connect them like variables</p> <p>\ud83e\udde0 Pod-to-pod communication just works using the <code>.pod</code> convention \u2014 e.g. <code>backend.pod</code>, <code>postgres.pod</code>, <code>auth.pod</code>.</p>"},{"location":"guides/quickstart/#next-steps","title":"\ud83e\uddea Next Steps","text":"<ul> <li>Add a database pod (like postgres)</li> <li>Use volumes for persistent storage</li> <li>Use secrets to securely mount API keys or credentials</li> <li>Reference other services with <code>&lt;pod-name&gt;.pod</code></li> <li>Explore full examples in the sidebar to scale from toy apps to production-ready systems.</li> </ul>"},{"location":"guides/quickstart/#quickstart-guide","title":"Quickstart Guide","text":"<p>This guide will help you get started with Nexlayer quickly. Follow these steps to install and begin using Nexlayer.</p>"},{"location":"guides/quickstart/#installation","title":"Installation","text":""},{"location":"guides/quickstart/#using-package-managers","title":"Using Package Managers","text":""},{"location":"guides/quickstart/#macos-homebrew","title":"macOS (Homebrew)","text":"<pre><code>brew install nexlayer\n</code></pre>"},{"location":"guides/quickstart/#linux-apt","title":"Linux (apt)","text":"<pre><code>curl -s https://apt.nexlayer.io/install.sh | sudo bash\nsudo apt-get install nexlayer\n</code></pre>"},{"location":"guides/quickstart/#windows-chocolatey","title":"Windows (Chocolatey)","text":"<pre><code>choco install nexlayer\n</code></pre>"},{"location":"guides/quickstart/#manual-installation","title":"Manual Installation","text":"<ol> <li>Download the latest release for your platform from our releases page</li> <li>Extract the binary to a directory in your PATH</li> <li>Make the binary executable (Unix-based systems): <pre><code>chmod +x nexlayer\n</code></pre></li> </ol>"},{"location":"guides/quickstart/#verify-installation","title":"Verify Installation","text":"<p>Check if Nexlayer is installed correctly: <pre><code>nexlayer version\n</code></pre></p>"},{"location":"guides/quickstart/#basic-usage","title":"Basic Usage","text":""},{"location":"guides/quickstart/#initialize-a-new-project","title":"Initialize a New Project","text":"<pre><code>nexlayer init my-project\ncd my-project\n</code></pre>"},{"location":"guides/quickstart/#configure-your-environment","title":"Configure Your Environment","text":"<p>Create a configuration file: <pre><code>nexlayer config init\n</code></pre></p> <p>Edit the configuration: <pre><code>nexlayer config edit\n</code></pre></p>"},{"location":"guides/quickstart/#start-the-web-interface","title":"Start the Web Interface","text":"<pre><code>nexlayer web\n</code></pre>"},{"location":"guides/quickstart/#create-your-first-agent","title":"Create Your First Agent","text":"<ol> <li> <p>Create a new agent: <pre><code>nexlayer agent create my-agent\n</code></pre></p> </li> <li> <p>Configure the agent: <pre><code>nexlayer agent config my-agent\n</code></pre></p> </li> <li> <p>Start the agent: <pre><code>nexlayer agent start my-agent\n</code></pre></p> </li> </ol>"},{"location":"guides/quickstart/#deploying-your-application","title":"Deploying Your Application","text":"<p>Nexlayer offers multiple ways to deploy your application. Here are the most common methods:</p>"},{"location":"guides/quickstart/#quick-deployment-with-curl","title":"Quick Deployment with curl","text":"<p>The fastest way to deploy your application is using <code>curl</code>:</p> <pre><code>curl -X POST https://app.nexlayer.io/startUserDeployment \\\n  -H \"Content-Type: text/x-yaml\" \\\n  --data-binary @nexlayer.yaml\n</code></pre> <p>\ud83d\udd10 No login required for preview deployments \u2014 this will give you a temporary URL valid for ~2 hours.</p>"},{"location":"guides/quickstart/#using-the-nexlayer-cli","title":"Using the Nexlayer CLI","text":"<p>For a more integrated experience, use the Nexlayer CLI:</p> <pre><code># Initialize your project (first time only)\nnexlayer init\n\n# Deploy your application\nnexlayer deploy\n</code></pre>"},{"location":"guides/quickstart/#using-the-web-ui","title":"Using the Web UI","text":"<ol> <li>Go to app.nexlayer.io/#/nexlayer-deployment-wizard</li> <li>Select My Nexlayer App</li> <li>Click \"Deploy\"</li> <li>Edit or paste your <code>nexlayer.yaml</code></li> <li>Click Deploy</li> </ol>"},{"location":"guides/quickstart/#using-github-actions","title":"Using GitHub Actions","text":"<p>For automated deployments, add this to your GitHub Actions workflow:</p> <pre><code>name: Deploy to Nexlayer\non:\n  push:\n    branches: [ main ]\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Deploy to Nexlayer\n        run: |\n          curl -X POST https://app.nexlayer.io/startUserDeployment \\\n            -H \"Content-Type: text/x-yaml\" \\\n            --data-binary @nexlayer.yaml\n</code></pre> <p>For more deployment options, see our Agent Integration Guide for AI agent deployments or CI Integration Guide for CI/CD pipelines.</p>"},{"location":"guides/quickstart/#next-steps_1","title":"Next Steps","text":"<ul> <li>Explore the CLI Reference for detailed command documentation</li> <li>Learn about Agent Integration</li> <li>Set up CI/CD Integration</li> <li>Check out our Examples for real-world use cases</li> </ul>"},{"location":"guides/quickstart/#common-commands","title":"Common Commands","text":"<pre><code># Get help\nnexlayer --help\n\n# List all commands\nnexlayer list\n\n# Check status\nnexlayer status\n\n# View logs\nnexlayer logs\n</code></pre>"},{"location":"guides/quickstart/#troubleshooting","title":"Troubleshooting","text":"<p>If you encounter any issues:</p> <ol> <li> <p>Check the logs: <pre><code>nexlayer logs\n</code></pre></p> </li> <li> <p>Verify your configuration: <pre><code>nexlayer config validate\n</code></pre></p> </li> <li> <p>Check system requirements: <pre><code>nexlayer doctor\n</code></pre></p> </li> </ol> <p>For more help, see our FAQ or open an issue on GitHub. </p>"},{"location":"guides/web-ui/","title":"Web UI Guide","text":"<p>The Nexlayer Web UI provides a graphical interface for managing your Nexlayer projects, agents, and configurations.</p>"},{"location":"guides/web-ui/#getting-started","title":"Getting Started","text":""},{"location":"guides/web-ui/#starting-the-web-ui","title":"Starting the Web UI","text":"<pre><code>nexlayer web start\n</code></pre> <p>The web interface will be available at <code>http://localhost:8080</code> by default.</p>"},{"location":"guides/web-ui/#accessing-the-web-ui","title":"Accessing the Web UI","text":"<ol> <li>Open your web browser</li> <li>Navigate to <code>http://localhost:8080</code></li> <li>Log in with your credentials</li> </ol>"},{"location":"guides/web-ui/#interface-overview","title":"Interface Overview","text":""},{"location":"guides/web-ui/#dashboard","title":"Dashboard","text":"<p>The dashboard provides an overview of your Nexlayer environment: - Active agents - System status - Recent activities - Resource usage</p>"},{"location":"guides/web-ui/#project-management","title":"Project Management","text":""},{"location":"guides/web-ui/#creating-a-new-project","title":"Creating a New Project","text":"<ol> <li>Click \"New Project\"</li> <li>Enter project details</li> <li>Configure project settings</li> <li>Click \"Create\"</li> </ol>"},{"location":"guides/web-ui/#managing-projects","title":"Managing Projects","text":"<ul> <li>View project details</li> <li>Edit project configuration</li> <li>Monitor project status</li> <li>Manage project resources</li> </ul>"},{"location":"guides/web-ui/#agent-management","title":"Agent Management","text":""},{"location":"guides/web-ui/#creating-agents","title":"Creating Agents","text":"<ol> <li>Navigate to \"Agents\"</li> <li>Click \"New Agent\"</li> <li>Select agent type</li> <li>Configure agent settings</li> <li>Click \"Create\"</li> </ol>"},{"location":"guides/web-ui/#managing-agents","title":"Managing Agents","text":"<ul> <li>Start/Stop agents</li> <li>Monitor agent status</li> <li>View agent logs</li> <li>Edit agent configuration</li> </ul>"},{"location":"guides/web-ui/#configuration","title":"Configuration","text":""},{"location":"guides/web-ui/#global-settings","title":"Global Settings","text":"<ul> <li>System configuration</li> <li>Logging settings</li> <li>Security settings</li> <li>Network configuration</li> </ul>"},{"location":"guides/web-ui/#project-settings","title":"Project Settings","text":"<ul> <li>Project-specific configuration</li> <li>Environment variables</li> <li>Resource limits</li> <li>Access control</li> </ul>"},{"location":"guides/web-ui/#monitoring","title":"Monitoring","text":""},{"location":"guides/web-ui/#system-metrics","title":"System Metrics","text":"<ul> <li>CPU usage</li> <li>Memory usage</li> <li>Disk usage</li> <li>Network traffic</li> </ul>"},{"location":"guides/web-ui/#agent-metrics","title":"Agent Metrics","text":"<ul> <li>Agent performance</li> <li>Task execution</li> <li>Error rates</li> <li>Resource utilization</li> </ul>"},{"location":"guides/web-ui/#features","title":"Features","text":""},{"location":"guides/web-ui/#real-time-updates","title":"Real-time Updates","text":"<ul> <li>Live status updates</li> <li>Real-time logs</li> <li>Instant notifications</li> <li>Active monitoring</li> </ul>"},{"location":"guides/web-ui/#security","title":"Security","text":"<ul> <li>Role-based access control</li> <li>Authentication</li> <li>Audit logging</li> <li>Secure communication</li> </ul>"},{"location":"guides/web-ui/#integration","title":"Integration","text":"<ul> <li>API access</li> <li>Webhook support</li> <li>External tool integration</li> <li>Custom plugins</li> </ul>"},{"location":"guides/web-ui/#best-practices","title":"Best Practices","text":"<ol> <li>Security</li> <li>Use strong passwords</li> <li>Enable two-factor authentication</li> <li>Regular security audits</li> <li> <p>Keep software updated</p> </li> <li> <p>Performance</p> </li> <li>Monitor resource usage</li> <li>Optimize configurations</li> <li>Regular maintenance</li> <li> <p>Backup important data</p> </li> <li> <p>Usability</p> </li> <li>Customize dashboard</li> <li>Set up notifications</li> <li>Create shortcuts</li> <li>Use keyboard shortcuts</li> </ol>"},{"location":"guides/web-ui/#troubleshooting","title":"Troubleshooting","text":""},{"location":"guides/web-ui/#common-issues","title":"Common Issues","text":"<ol> <li>Web UI Not Accessible</li> <li>Check if service is running</li> <li>Verify port availability</li> <li>Check firewall settings</li> <li> <p>Review logs</p> </li> <li> <p>Performance Issues</p> </li> <li>Monitor resource usage</li> <li>Check network connectivity</li> <li>Review configuration</li> <li> <p>Clear browser cache</p> </li> <li> <p>Authentication Problems</p> </li> <li>Verify credentials</li> <li>Check account status</li> <li>Reset password if needed</li> <li>Contact administrator</li> </ol>"},{"location":"guides/web-ui/#keyboard-shortcuts","title":"Keyboard Shortcuts","text":"<ul> <li><code>Ctrl + N</code>: New project</li> <li><code>Ctrl + A</code>: New agent</li> <li><code>Ctrl + S</code>: Save changes</li> <li><code>Ctrl + F</code>: Search</li> <li><code>Ctrl + L</code>: View logs</li> <li><code>Ctrl + Q</code>: Quick actions</li> </ul>"},{"location":"guides/web-ui/#api-integration","title":"API Integration","text":"<p>The Web UI exposes a REST API for automation:</p> <pre><code># Get system status\ncurl http://localhost:8080/api/v1/status\n\n# List agents\ncurl http://localhost:8080/api/v1/agents\n\n# Create new agent\ncurl -X POST http://localhost:8080/api/v1/agents \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"name\": \"my-agent\", \"type\": \"default\"}'\n</code></pre>"},{"location":"guides/web-ui/#customization","title":"Customization","text":""},{"location":"guides/web-ui/#themes","title":"Themes","text":"<ul> <li>Light mode</li> <li>Dark mode</li> <li>Custom themes</li> <li>Color schemes</li> </ul>"},{"location":"guides/web-ui/#layout","title":"Layout","text":"<ul> <li>Customizable dashboard</li> <li>Widget arrangement</li> <li>Panel organization</li> <li>View preferences</li> </ul>"},{"location":"guides/web-ui/#support","title":"Support","text":"<p>For additional help: - Check the FAQ - Review Examples - Open GitHub issues - Join community discussions </p>"}]}